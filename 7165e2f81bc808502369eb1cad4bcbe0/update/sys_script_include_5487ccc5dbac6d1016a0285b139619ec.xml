<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_avx_appviewx_aut.update_profile_table</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>update_profile_table</name>
        <script><![CDATA[var update_profile_table = Class.create();
update_profile_table.prototype = {
    initialize: function() {},
    updateProfileTable: function(company_name) {
        try {
            var vendor_names = ["IIS", "F5", "Apache", "Azure", "Silverline"];
            var category = {
                "IIS": "Server",
                "F5": "ADC",
                "Apache": "Server",
                "Azure": "cloud",
				"Silverline": "Server"
            };
            var gr = new GlideRecordSecure('x_avx_appviewx_aut_vendor_profiles_table');
			if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
				gr.addQuery('company', company_name);
			}
            gr.query();
            while (gr.next()) {
                gr.deleteRecord();
            }
            var r = new sn_ws.RESTMessageV2();
            if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
                gr = new GlideRecordSecure('x_avx_appviewx_aut_connection_settings_table');
				gr.addQuery('company', company_name);
                gr.query();
				if (!gr.hasNext()) {
					throw "Could not find AppViewX instance url to fetch the details.";
				}
				while (gr.next()) {
					var url = gr.getValue('instance_url') || '';
					var mid_server = gr.getValue('mid_server') || '';
				}
            } else {
				url = gs.getProperty("x_avx_appviewx_aut.URL");
				mid_server = gs.getProperty("x_avx_appviewx_aut.MID Server Name");
			}
			var error_message;
            for (var vendor = 0; vendor < vendor_names.length; vendor++) {
                var script_include_call = new appviewx_oauth_token_generation();
				var client_id;
                var token_generation = script_include_call.TestConnection(client_id, company_name);
                if (token_generation.length == 2 && token_generation[0] == 200) {
                    var parse_response = JSON.parse(token_generation[1]);
                    var token = parse_response['response'];
                } else {
                    throw "Error while generating the token";
                }
                var category_name = category[vendor_names[vendor]];
                var payload = {};
                if (mid_server != "") {
                    r.setMIDServer(mid_server);
                    r.setEccParameter('skip_sensor', 'true');
                }
                r.setHttpMethod("get");
                r.setRequestHeader("token", token);
                r.setRequestHeader('User-Agent', 'snow');
                r.setRequestHeader("Content-Type", "application/json");
                r.setEndpoint(url + "/avxapi/certificate/profiles");
                r.setQueryParameter("category", category_name);
                r.setQueryParameter("vendor", vendor_names[vendor]);
				if (category_name == "cloud") {
					r.setQueryParameter("service", "Key vault");
				}
                r.setRequestBody(JSON.stringify(payload));
                r.setHttpTimeout(60000);
                var response = r.executeAsync();
                var responseBody, message;
                if (response.haveError()) {
                    responseBody = response.getBody();
                    try {
                        var res = JSON.parse(responseBody);
                        message = res.message;
                    } catch (err) {
                        message = responseBody;
                    }
					if(!error_message) {
						error_message = message + " " + vendor_names[vendor];
					} else {
						error_message = ", " + error_message + " " + message + " " + vendor_names[vendor];
					}
                    continue;
                } else {
                    responseBody = response.getBody();
                    responseBody = JSON.parse(responseBody);
                }
                var profile_list = responseBody.response.objects;
                var query_table = new GlideRecordSecure('x_avx_appviewx_aut_vendor_profiles_table');
                query_table.query();
                var profile_names = [];
                for (var profile = 0; profile < profile_list.length; profile++) {
                    query_table.profile_name = profile_list[profile];
                    query_table.vendor_name = vendor_names[vendor];
					query_table.company = company_name;
                    query_table.insert();
                }
            }
            var log = new GlideRecordSecure('x_avx_appviewx_aut_logs');
            log.initialize();
            log.level = "Info";
            log.script = "update_profile_table";
            log.application = "AppViewX";
            if (error_message) {
                log.message = "AppViewX Profile Table SYNC were successfully completed with the exceptions " + error_message;
            } else {
                log.message = "AppViewX Profile Table SYNC were successfully completed.";
            }
			log.company = company_name;
            log.insert();
        } catch (error) {
            gs.info("AppViewX REST API failed while fetching the profile details from AppViewX : " + error);
            log = new GlideRecordSecure('x_avx_appviewx_aut_logs');
            log.initialize();
            log.level = 'Error';
            log.script = 'update_profile_table';
            log.application = 'AppViewX';
            log.message = 'Error occured while getting profile details from appviewx -  ' + error;
			log.company = company_name;
            log.insert();
        }
    },

    type: 'update_profile_table'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-20 12:14:17</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>5487ccc5dbac6d1016a0285b139619ec</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>update_profile_table</sys_name>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>sys_script_include_5487ccc5dbac6d1016a0285b139619ec</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-01 12:40:15</sys_updated_on>
    </sys_script_include>
</record_update>
