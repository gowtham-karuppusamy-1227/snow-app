<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Enroll Certificate">d830d29c1bc91d1061858480cd4bcbe1</cat_item>
        <cat_variable>IO:0f8f485adb56a15016a0285b139619f8</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>set_globalsign_validity_unit</name>
        <order/>
        <published_ref/>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading) {
   if (isLoading || newValue == '') {
      return;
   }

    function setVendorSpecificDetails(vendor_details) {
        try {
			var vendor_values;
			for (var res = 0; res < vendor_details.length; res++) {
				if (vendor_details[res].divClasses !== 'hidden') {
					if (vendor_details[res].name === 'domainAdminMailId') {
						g_form.setDisplay('domain_admin_email', true);
						g_form.setMandatory('domain_admin_email', true);
						g_form.addOption('domain_admin_email', '', 'Select');
						g_form.setValue('domain_admin_email', '', 'Select');
						vendor_values = vendor_details[res].values;
						for (var i = 0; i < vendor_values.length; i++) {
							g_form.addOption('domain_admin_email', vendor_values[i].value, vendor_values[i].value);
						}
					} else if (vendor_details[res].name === 'businessCategory') {
						g_form.setDisplay('business_category', true);
						g_form.setMandatory('business_category', true);
						g_form.addOption('business_category', '', 'Select');
						g_form.setValue('business_category', '', 'Select');
						vendor_values = vendor_details[res].values;
						for (var j = 0; j < vendor_values.length; j++) {
							g_form.addOption('business_category', vendor_values[j].value, vendor_values[j].value);
						}
					} else if (vendor_details[res].name === 'incorporatingAgencyRegistrationNumber') {
						g_form.setDisplay('incorporating_agency_reg_no', true);
						g_form.setMandatory('incorporating_agency_reg_no', true);
					} else if (vendor_details[res].name === 'designation') {
						g_form.setDisplay('designation', true);
						g_form.setMandatory('designation', true);
					}
				}
			}
        } catch (error) {
            g_form.addErrorMessage("Error : "+error);
            var message = 'Error occurred while setting the vendor specific details in the form - ' + error;
            var ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "set_globalsign_validity_unit");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
        }
    }

    function getResponse(response) {
        try {
            var answer = response.responseXML.documentElement.getAttribute('answer');
            try {
                answer = JSON.parse(answer);
            } catch (err) {
                throw "Couldn't parse Server Type details.";
            }
            var gs_response = answer.response;
            var status = gs_response.output.status;
            if (status != "Success") {
                throw "Could not find Vendor Specific Details for the selected input.";
            }
            var vendor_details = gs_response.output.vendor_response;
            setVendorSpecificDetails(vendor_details);
        } catch (error) {
            g_form.addErrorMessage("Error : "+error);
            var message = 'Error occurred while fetching vendor specific details from AppViewX - ' + error;
            var ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "set_globalsign_validity_unit");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
        }
    }

    try {
        var CA = g_form.getValue('certificate_authority');
        var ca_account = g_form.getValue('ca_account');
        var ca_policy = g_form.getValue('ca_policy_details');
        var certificate_category = g_form.getValue('certificate_category');
		var csr_input_method = g_form.getValue('csr_input_method');
        var globalsign_certificate_type = g_form.getValue('globalsign_certificate_type');
		var certificate_policy = g_form.getValue('certificate_policy');
        try {
            ca_policy = JSON.parse(ca_policy);
        } catch (err) {
            throw "Couldn't parse the ca policy details.";
        }
        if (CA === 'GlobalSign') {
			g_form.clearOptions('business_category');
			g_form.clearValue('business_category');
			g_form.setMandatory('business_category', false);
			g_form.setDisplay('business_category', false);
			g_form.clearValue('incorporating_agency_reg_no');
			g_form.setMandatory('incorporating_agency_reg_no', false);
			g_form.setDisplay('incorporating_agency_reg_no', false);
			g_form.clearValue('designation');
			g_form.setMandatory('designation', false);
			g_form.setDisplay('designation', false);
			g_form.clearOptions('domain_admin_email');
			g_form.clearValue('domain_admin_email');
			g_form.setMandatory('domain_admin_email', false);
			g_form.setDisplay('domain_admin_email', false);
            g_form.setMandatory('validity_unit', true);
            g_form.setDisplay('validity_unit', true);
            g_form.clearOptions('validity_unit');
			g_form.clearOptions('validity_unit');
            g_form.addOption('validity_unit', '', 'Select');
            for (var iterator = 0; iterator < ca_policy.length; iterator++) {
                var result = ca_policy[iterator];
                if (!result.certificateAuthority) {
                    throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                }
                if (result.certificateAuthority === CA) {
                    if (!result.caSettings) {
                        throw 'CA Account settings is not configured in AppViewX Policy.';
                    }
                    var globalsign_casettings = result.caSettings;
                    for (var div = 0; div < globalsign_casettings.length; div++) {
                        if (globalsign_casettings[div].name == ca_account) {
                            if (!globalsign_casettings[div].certTypes) {
                                throw 'Certificate types are not configured in AppviewX Policy.';
                            }
                            var cert_types = globalsign_casettings[div].certTypes;
                            for (var cert_type = 0; cert_type < cert_types.length; cert_type++) {
                                if ((cert_types[cert_type].type).toLowerCase() == certificate_category.toLowerCase() && cert_types[cert_type].name == globalsign_certificate_type) {
									var vendor_details = cert_types[cert_type].vendorSpecificDetails;
									if (!vendor_details) {
										var company_name = g_form.getValue('company_name');
										var ajax = new GlideAjax('get_server_types');
										ajax.addParam('sysparm_name', 'getServerTypes');
										ajax.addParam('certificate_authority', CA);
										ajax.addParam('ca_settings_name', ca_account);
										ajax.addParam('certificate_type', globalsign_certificate_type);
										ajax.addParam('certificate_category', certificate_category);
										ajax.addParam('cert_policy', certificate_policy);
										ajax.addParam('sysparm_company', company_name);
										ajax.getXML(getResponse);
									} else {
										var vendor_keys = Object.keys(vendor_details);
										var vendor_values;
										for (var key = 0; key < vendor_keys.length; key++) {
											if (vendor_keys[key] === 'domainAdminMailId') {
												g_form.setDisplay('domain_admin_email', true);
												g_form.setMandatory('domain_admin_email', true);
												g_form.addOption('domain_admin_email', '', 'Select');
												g_form.setValue('domain_admin_email', '', 'Select');
												vendor_values = vendor_details.domainAdminMailId;
												for (var i = 0; i < vendor_values.length; i++) {
													g_form.addOption('domain_admin_email', vendor_values[i], vendor_values[i]);
												}
											} else if (vendor_keys[key] === 'businessCategory') {
												g_form.setDisplay('business_category', true);
												g_form.setMandatory('business_category', true);
												g_form.addOption('business_category', '', 'Select');
												g_form.setValue('business_category', '', 'Select');
												vendor_values = vendor_details.businessCategory;
												for (var j = 0; j < vendor_values.length; j++) {
													g_form.addOption('business_category', vendor_values[j], vendor_values[j]);
												}
												g_form.setDisplay('incorporating_agency_reg_no', true);
												g_form.setMandatory('incorporating_agency_reg_no', true);
												if (vendor_details.incorporatingAgencyRegistrationNumber) {
													g_form.setValue('incorporating_agency_reg_no', vendor_details.incorporatingAgencyRegistrationNumber, vendor_details.incorporatingAgencyRegistrationNumber);
												}
												g_form.setDisplay('designation', true);
												g_form.setMandatory('designation', true);
												if (vendor_details.designation) {
													g_form.setValue('designation', vendor_details.designation, vendor_details.designation);
												}
											}
										}
									}
// 									var sha_type = cert_types[cert_type].shaType;
// 									if (sha_type && csr_input_method === 'Manual') {
// 										g_form.clearOptions('hash_function');
// 										g_form.clearValue('hash_function');
// 										g_form.addOption('hash_function', '', 'Select');
// 										g_form.setValue('hash_function', '', 'Select');
// 										for(var hash = 0; hash < sha_type.length; hash++) {
// 											g_form.addOption('hash_function', sha_type[hash], sha_type[hash]);
// 										}
// 										g_form.setValue('hash_function', sha_type[0], sha_type[0]);
// 									}
                                    var validity = cert_types[cert_type].validityPeriods;
                                    var keys = Object.keys(validity);
                                    for (var v_unit = 0; v_unit < keys.length; v_unit++) {
                                        if (keys[v_unit].includes("Years") && validity[keys[v_unit]].length > 0) {
                                            g_form.addOption('validity_unit', "Years", "Years");
                                        } else if (keys[v_unit].includes("Months") && validity[keys[v_unit]].length > 0) {
                                            g_form.addOption('validity_unit', "Months", "Months");
                                        } else if (keys[v_unit].includes("Days") && validity[keys[v_unit]].length > 0) {
                                            g_form.addOption('validity_unit', "Days", "Days");
                                        }
                                    }
                                    g_form.setValue('validity_unit', '', 'Select');
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (error) {
        g_form.addErrorMessage("Error: " + error + " Please check with the AppviewX admin/CLM Settings.");
        var message = 'Error occured while setting globalsign validity unit in the form - ' + error;
        var ga = new GlideAjax('avx_logger');
        ga.addParam("sysparm_name", "avxLogger");
        ga.addParam("sysparm_level", "Error");
        ga.addParam("sysparm_script", "set_globalsign_validity_unit");
        ga.addParam("sysparm_application", "AppViewX");
        ga.addParam("sysparm_message", message);
        ga.getXML(function() {});
    }
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-21 09:40:15</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f7c2189adb56a15016a0285b13961942</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>set_globalsign_validity_unit</sys_name>
        <sys_overrides/>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>catalog_script_client_f7c2189adb56a15016a0285b13961942</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-05 07:25:51</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <va_supported>true</va_supported>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
