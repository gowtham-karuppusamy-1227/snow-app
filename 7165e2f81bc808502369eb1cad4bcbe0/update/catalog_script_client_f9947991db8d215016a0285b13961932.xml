<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Enroll Certificate">d830d29c1bc91d1061858480cd4bcbe1</cat_item>
        <cat_variable>IO:0fcda75adb74e11016a0285b139619e2</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>set_device_names_for_push</name>
        <order/>
        <published_ref/>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading) {
    if (isLoading || newValue == '') {
        return;
    }
    try {
        var cmdb_sync = g_form.getValue('cmdb_sync');
        var vendor_name = g_form.getValue('vendor_name');
        var company_name = g_form.getValue('company_name');
        var ga = new GlideAjax('get_device_names');
        ga.addParam("sysparm_name", "getDeviceNames");
        ga.addParam("sysparm_vendorName", vendor_name);
        ga.addParam("sysparm_company", company_name);
        ga.getXML(getResponse);
    } catch (error) {
        g_form.addErrorMessage("Error while fetching the device names for push: " + error);
        var message = 'Error occured while setting device names for the push - ' + error;
        ga = new GlideAjax('avx_logger');
        ga.addParam("sysparm_name", "avxLogger");
        ga.addParam("sysparm_level", "Error");
        ga.addParam("sysparm_script", "set_device_names");
        ga.addParam("sysparm_application", "AppViewX");
        ga.addParam("sysparm_message", message);
        ga.getXML(function() {});
    }

    function getResponse(response) {
        try {
            var push_formats = {};
            push_formats['Azure'] = ['PKCS#12(*.p12)', 'PKCS#12(*.pfx)'];
            push_formats['Apache'] = ['PEM(*.pem)', 'PEM(*.crt)', 'PEM(*.cer)'];
			push_formats['Tomcat'] = ['PEM(*.pem)', 'PEM(*.crt)', 'PEM(*.cer)'];
			push_formats['LinuxServer'] = ['PEM(*.pem)', 'PEM(*.crt)', 'PEM(*.cer)', 'DER(*.der)', 'DER(*.cer)' , 'PKCS#12(*.p12)', 'PKCS#12(*.pfx)'];
            g_form.clearValue('push_assignment_group');
            g_form.setMandatory('push_assignment_group', false);
            g_form.setDisplay('push_assignment_group', false);
            g_form.clearOptions('profile_name');
            g_form.clearValue('profile_name');
            g_form.setMandatory('profile_name', false);
            g_form.setDisplay('profile_name', false);
            g_form.clearValue('profile_name_reference');
            g_form.setMandatory('profile_name_reference', false);
            g_form.setDisplay('profile_name_reference', false);
            g_form.clearOptions('device_name');
            g_form.clearValue('device_name');
            g_form.setDisplay('device_name', true);
            g_form.setMandatory('device_name', true);
            g_form.addOption('device_name', '', 'Select');
            g_form.clearOptions('push_certificate_format');
            g_form.clearValue('push_certificate_format');
            g_form.setReadOnly('customize_push_location', false);
            g_form.clearValue('customize_push_location');
            g_form.setDisplay('customize_push_location', false);
            g_form.clearValue('service_restart');
            g_form.setDisplay('service_restart', false);
            g_form.clearValue('private_key_in_device');
            g_form.setDisplay('private_key_in_device', false);
            g_form.clearValue('apache_certificate_directory');
            g_form.setMandatory('apache_certificate_directory', false);
            g_form.setDisplay('apache_certificate_directory', false);
            g_form.clearValue('apache_key_directory');
            g_form.setMandatory('apache_key_directory', false);
            g_form.setDisplay('apache_key_directory', false);
            g_form.clearValue('apache_intermediate_and_ca_certificate_directory');
            g_form.setMandatory('apache_intermediate_and_ca_certificate_directory', false);
            g_form.setDisplay('apache_intermediate_and_ca_certificate_directory', false);
            g_form.clearValue('profile_name');
            g_form.clearOptions('profile_name');
            g_form.clearValue('profile_name_reference');
            g_form.setMandatory('profile_name_reference', false);
            g_form.setDisplay('profile_name_reference', false);
            g_form.setMandatory('profile_name', false);
            g_form.setDisplay('profile_name', false);
            if (vendor_name == 'F5' || vendor_name == 'IIS' || vendor_name == 'Silverline' || vendor_name == 'Microsoft Server') {
                g_form.setMandatory('push_certificate_format', false);
                g_form.setDisplay('push_certificate_format', false);
            } else {
                g_form.setDisplay('push_certificate_format', true);
                g_form.setMandatory('push_certificate_format', true);
                g_form.addOption('push_certificate_format', '', 'Select');
            }
            var iterator;
            var res = response.responseXML.documentElement.getAttribute('answer');
            try {
                res = JSON.parse(res);
            } catch (err) {
                throw res || "Couldn't parse the response while trying to get device names for push.";
            }
            if (cmdb_sync == 'true') {
                if (res.length == 0) {
                    throw "No devices were found for the given inputs.";
                }
                for (iterator = 0; iterator < res.length; iterator++) {
                    g_form.addOption('device_name', res[iterator], res[iterator]);
                }
            } else {
                if (!res.response.output) {
                    throw "Error while getting the response from the AppViewX for the device names " + JSON.stringify(res);
                }
                var device_list = res.response.output;
                if (device_list.length == 0) {
                    throw "There is no devices available for the selected vendor " + vendor_name;
                }
                for (iterator = 0; iterator < device_list.length; iterator++) {
                    g_form.addOption('device_name', device_list[iterator].name, device_list[iterator].name);
                }
            }
            if (vendor_name != 'F5' && vendor_name != 'IIS' && vendor_name != 'Silverline' && vendor_name != 'Microsoft Server') {
                var format_list = push_formats[vendor_name];
                for (var format = 0; format < format_list.length; format++) {
                    g_form.addOption('push_certificate_format', format_list[format], format_list[format]);
                }
            }
            if (vendor_name == 'Apache' |vendor_name == 'Tomcat' ) {
                g_form.setDisplay('customize_push_location', true);
                g_form.setDisplay('service_restart', true);
                g_form.setDisplay('private_key_in_device', true);
            } else {
                g_form.setDisplay('customize_push_location', false);
                g_form.setDisplay('service_restart', false);
                g_form.setDisplay('private_key_in_device', false);
            }
            if (vendor_name == 'Silverline') {
                g_form.setDisplay('push_root_and_intermediate_certificates', false);
                g_form.setValue('push_root_and_intermediate_certificates', false, false);
            }
			if (vendor_name == 'LinuxServer') {
                g_form.setDisplay('private_key_in_device', true);
			}
        } catch (error) {
            g_form.addErrorMessage("Error while fetching the device names for push: " + error);
            var message = 'Error occured while fetching the device names for push - ' + error;
            var ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "set_device_names");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
        }
    }
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-15 10:49:57</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f9947991db8d215016a0285b13961932</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>set_device_names_for_push</sys_name>
        <sys_overrides/>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>catalog_script_client_f9947991db8d215016a0285b13961932</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-02-18 10:45:52</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <va_supported>true</va_supported>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
