<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Enroll Certificate">d830d29c1bc91d1061858480cd4bcbe1</cat_item>
        <cat_variable>IO:0aa74fb31b348610cda7db91dd4bcb10</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>set_key_type_for_digicert_mpki</name>
        <order/>
        <published_ref/>
        <script><![CDATA[/*
Function to populate the below details by dynamically fetching it from the AppviewX policy.
	1. Key Type for the DigiCert MPKI
*/

function changeFieldLabel(oldLabel, newLabel) {
    $j("span").filter(function() {
        return ($j(this).text() === oldLabel);
    }).html(newLabel);
}

function set_digicert_custom_attribute(profile_name) {
    try {
        var custom_attributes = [];
        var digicert_mpki_profile = g_form.getValue('digicert_mpki_profiles');
        for (var iterator = 0; iterator < profile_name.length; iterator++) {
            if (profile_name[iterator].profileName == digicert_mpki_profile) {
                custom_attributes = profile_name[iterator].customAttributes || [];
                break;
            }
        }
        var custom_attributes_length = custom_attributes.length;
        if (custom_attributes_length > 0) {
            for (var meta_data = 1; meta_data < custom_attributes_length + 1; meta_data++) {
                g_form.setDisplay('custom_meta_data_' + meta_data, true);
                var label_name = custom_attributes[meta_data - 1].label;
                try {
                    changeFieldLabel('Custom Meta Data ' + (meta_data).toString(), label_name);
                } catch (error) {
                    g_form.setLabelOf('custom_meta_data_' + meta_data, label_name);
                }
                if (custom_attributes[meta_data - 1].mandatory) {
                    g_form.setMandatory('custom_meta_data_' + meta_data, true);
                }
            }
        }
    } catch (error) {
        g_form.addErrorMessage("Error: " + error);
        var message = 'Error occurred while setting custom attributes for DigiCert MPKI - ' + error;
        var ga = new GlideAjax('avx_logger');
        ga.addParam("sysparm_name", "avxLogger");
        ga.addParam("sysparm_level", "Error");
        ga.addParam("sysparm_script", "set_key_type_for_digicert_mpki");
        ga.addParam("sysparm_application", "AppViewX");
        ga.addParam("sysparm_message", message);
        ga.getXML(function() {});
    }
}


function getResponse(response) {
    try {
        var ca_account = g_form.getValue('ca_account');
        var answer = response.responseXML.documentElement.getAttribute('answer');
        try {
            answer = JSON.parse(answer);
        } catch (err) {
            throw "Couldn't parse ejbca certificate authority details.";
        }
        var ca_response = answer.response;
        var flag = 0;
        for (var iterator = 0; iterator < ca_response.length; iterator++) {
            if (ca_response[iterator].name == ca_account) {
                flag = 1;
                var digicert_response = answer.response[iterator].vendorSpecificSettings;
                break;
            }
        }
        if (flag == 0) {
            throw "The selected CA-Account in the CLM Settings is not available in the response";
        }
        g_form.setValue('digicert_mpki_ca_details', JSON.stringify(digicert_response), JSON.stringify(digicert_response));
        var profile_name = digicert_response.endEntityProfiles;
        set_digicert_custom_attribute(profile_name);
    } catch (error) {
        g_form.addErrorMessage("Error: " + error);
        var message = 'Error occurred while fetching DigiCert MPKI vendor specific fields - ' + error;
        var ga = new GlideAjax('avx_logger');
        ga.addParam("sysparm_name", "avxLogger");
        ga.addParam("sysparm_level", "Error");
        ga.addParam("sysparm_script", "set_key_type_for_digicert_mpki");
        ga.addParam("sysparm_application", "AppViewX");
        ga.addParam("sysparm_message", message);
        ga.getXML(function() {});
    }
}

function onChange(control, oldValue, newValue, isLoading, isTemplate) {
    if (isLoading || newValue === '') {
        return;
    }

    try {
        var CA = g_form.getValue('certificate_authority');
        var digicert_mpki_profile = g_form.getValue('digicert_mpki_profiles');
        var ca_policy = g_form.getValue('ca_policy_details');
        var ca_account = g_form.getValue('ca_account');
        var digicert_mpki_ca_details = g_form.getValue('digicert_mpki_ca_details');
        var company_name = g_form.getValue('company_name');
        var iterator, key;
        g_form.clearOptions('key_type');
        g_form.addOption('key_type', '', "Select");
        g_form.setValue('key_type', '', 'Select');
        for (iterator = 1; iterator <= 10; iterator++) {
            g_form.setMandatory('custom_meta_data_' + iterator, false);
            g_form.clearValue('custom_meta_data_' + iterator);
            g_form.setDisplay('custom_meta_data_' + iterator, false);
        }
        if (digicert_mpki_ca_details === "") {
            var ajax = new GlideAjax('get_ejbca_details');
            ajax.addParam('sysparm_name', 'getEjbcaDetails');
            ajax.addParam('certificate_authority', CA);
            ajax.addParam('sysparm_company', company_name);
            ajax.getXML(getResponse);
        } else {
            try {
                digicert_mpki_ca_details = JSON.parse(digicert_mpki_ca_details);
            } catch (err) {
                throw "Couldn't parse the DigiCert MPKI ca details to fetch the specific fields.";
            }
            digicert_mpki_ca_details = digicert_mpki_ca_details.endEntityProfiles;
            set_digicert_custom_attribute(digicert_mpki_ca_details);
        }
        try {
            ca_policy = JSON.parse(ca_policy);
        } catch (err) {
            throw "Couldn't parse the ca policy to fetch the associated key type.";
        }
        if (CA === 'DigiCert MPKI') {
            var profile_flag = 0;
            for (iterator = 0; iterator < ca_policy.length; iterator++) {
                result = ca_policy[iterator];
                if (!result.certificateAuthority) {
                    throw 'Certificate Autority is not configured in AppviewX policy.';
                }
                if (result.certificateAuthority === CA) {
                    var digicert_casettings = result.caSettings;
                    for (caSetting = 0; caSetting < digicert_casettings.length; caSetting++) {
                        if (!digicert_casettings[caSetting].name) {
                            throw 'CA account details or DigiCert MPKI profiles are not available.';
                        }
                        if (digicert_casettings[caSetting].name === ca_account) {
                            var digicert_profiles = digicert_casettings[caSetting].profiles || {};
                            if (digicert_profiles.name == digicert_mpki_profile) {
                                profile_flag = 1;
                                var key_params = digicert_profiles.certificateKeyParams || {};
                                var keys = Object.keys(key_params);
                                for (var size = 0; size < keys.length; size++) {
                                    if (key_params[keys[size]].length > 0) {
                                        g_form.addOption('key_type', keys[size], keys[size]);
                                    }
                                }
                                if (keys.length > 0) {
                                    g_form.setValue('key_type', keys[0], keys[0]);
                                }
                                break;
                            }
                        }
                        if (profile_flag == 1) {
                            break;
                        }
                    }
                }
            }
        }
    } catch (error) {
        g_form.addErrorMessage("Error: " + error);
        var message = 'Error occured while fetching key type from policy details - ' + error;
        var ga = new GlideAjax('avx_logger');
        ga.addParam("sysparm_name", "avxLogger");
        ga.addParam("sysparm_level", "Error");
        ga.addParam("sysparm_script", "set_key_type_for_digicert_mpki");
        ga.addParam("sysparm_application", "AppViewX");
        ga.addParam("sysparm_message", message);
        ga.getXML(function() {});
    }

}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-03-14 18:39:02</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>766313ff1b348610cda7db91dd4bcb3f</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>set_key_type_for_digicert_mpki</sys_name>
        <sys_overrides/>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>catalog_script_client_766313ff1b348610cda7db91dd4bcb3f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-20 10:51:34</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <va_supported>false</va_supported>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
