<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_client">
    <sys_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_extended>false</applies_extended>
        <condition/>
        <description>Sets Certificate Authorities in the CLM Settings which are configured in AppViewX.</description>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>clm_settings_set_certificate_authority</name>
        <order/>
        <script><![CDATA[function onLoad() {
    if (g_form.isNewRecord()) {
        var loadingDialog = new GlideDialogWindow("dialog_loading", true);
        loadingDialog.setPreference('table', 'loading');
        loadingDialog.setTitle('Loading...');
        loadingDialog.render();
        var company_name = g_form.getValue("company");
        var ga = new GlideAjax('clm_settings_get_certificate_authority');
        ga.addParam("sysparm_name", "getCertificateAuthority");
        ga.addParam("sysparm_company", company_name);
        ga.getXML(getResponse);
		ga = new GlideAjax('get_cert_attributes');
		ga.addParam("sysparm_name", "getCertificateAttributes");
		ga.addParam("sysparm_company", company_name);
		ga.getXML(getCertAttrResponse);
    }

    function getResponse(response) {
        try {
            g_form.clearOptions('ca_type');
            var supported_ca = ['AppViewX', 'DigiCert', 'Microsoft Enterprise', 'Entrust', 'Ejbca', 'GoDaddy', 'Amazon', 'Comodo Certificate Manager', 'GlobalSign', 'GlobalSignMSSL', 'AppViewX PKIaaS', 'Trustwave', 'HydrantID', 'SwissSign','Microsoft Standalone'];
            var res = response.responseXML.documentElement.getAttribute('answer');
            try {
                res = JSON.parse(res);
            } catch (err) {
                throw res || "Could not parse JSON response";
            }
            g_form.setValue("ca_response", JSON.stringify(res), JSON.stringify(res));
            res = res.response.output;
            for (var iterator = 0; iterator < res.length; iterator++) {
                if (supported_ca.includes(res[iterator]['certificateAuthority'])) {
                    g_form.addOption('ca_type', res[iterator]['certificateAuthority'], res[iterator]['certificateAuthority']);
                }
            }
        } catch (error) {
            g_form.addErrorMessage("Error: " + error);
            var message = "Error: " + error;
            var ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "clm_settings_set_certificate_authority");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
		} finally {
			loadingDialog.destroy();
		}
    }
	function getCertAttrResponse(response) {
		try {
			var res = response.responseXML.documentElement.getAttribute('answer');
			try {
				res = JSON.parse(res);
			} catch (err) {
				throw res || "Could not parse JSON response";
			}
			res = res.response;
			var obj = {};
			if (res.length > 0) {
				for (var iterator = 0; iterator < res.length; iterator++) {
					if (res[iterator].searchKey != 'requestor' && res[iterator].searchKey != 'requestor_assignment_group') {
						obj[res[iterator].label] = res[iterator].searchKey;
					}
				}
				g_form.setDisplay('meta_data_configured_in_appviewx', true);
				g_form.setValue('meta_data_configured_in_appviewx', JSON.stringify(obj));
			}
			//loadingDialog.destroy();
		} catch (error) {
			g_form.addErrorMessage("Error: " + error);
			var message = "Error: " + error;
			var ga = new GlideAjax('avx_logger');
			ga.addParam("sysparm_name", "avxLogger");
			ga.addParam("sysparm_level", "Error");
			ga.addParam("sysparm_script", "set_cert_attributes");
			ga.addParam("sysparm_application", "AppViewX");
			ga.addParam("sysparm_message", message);
			ga.getXML(function() {});
		} finally {
			loadingDialog.destroy();
		}
	}

}]]></script>
        <sys_class_name>sys_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-07-13 06:20:34</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>1205975b1b2415502369eb1cad4bcb5a</sys_id>
        <sys_mod_count>94</sys_mod_count>
        <sys_name>clm_settings_set_certificate_authority</sys_name>
        <sys_overrides/>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>sys_script_client_1205975b1b2415502369eb1cad4bcb5a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-03 06:06:47</sys_updated_on>
        <table>x_avx_appviewx_aut_clm_settings</table>
        <type>onLoad</type>
        <ui_type>0</ui_type>
        <view/>
    </sys_script_client>
</record_update>
