<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Enroll Certificate">d830d29c1bc91d1061858480cd4bcbe1</cat_item>
        <cat_variable>IO:488716181b0d1d1061858480cd4bcbbb</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>set_ca_details</name>
        <order/>
        <published_ref/>
        <script><![CDATA[/*

Function is to control the meta data ifo visibility

*/

function changeFieldLabel(oldLabel, newLabel) {
    $j("span").filter(function() {
        return ($j(this).text() === oldLabel);
    }).html(newLabel);
}


function set_meta_data(meta_data_info, mandatory_attributes) {
    try {
        var meta_info = JSON.parse(meta_data_info);
        var obj = [];
		var field_name = [];
        for (var key in meta_info) {
            var key_value = meta_info[key];
            obj.push(key_value);
			field_name.push(key);
        }
        g_form.setValue('meta_data_info', JSON.stringify(obj), JSON.stringify(obj));
		g_form.setValue("meta_data_field_name", JSON.stringify(field_name), JSON.stringify(field_name));
        g_form.setValue('mandatory_attributes', JSON.stringify(mandatory_attributes), JSON.stringify(mandatory_attributes));
        var meta_length = Object.keys(meta_info).length;
        g_form.setValue('cert_attribute_length', meta_length, meta_length);
        if (meta_length > 0) {
            for (var meta_data = 1; meta_data < meta_length + 1; meta_data++) {
                g_form.setDisplay('meta_data_' + meta_data, true);
				try {
					changeFieldLabel('Meta Data ' + (meta_data).toString(), field_name[meta_data - 1]);
				} catch (error) {
					g_form.setLabelOf('meta_data_' + meta_data, field_name[meta_data - 1]);
				}
                if (mandatory_attributes.indexOf(obj[meta_data - 1]) !== -1) {
                    g_form.setMandatory('meta_data_' + meta_data, true);
                }
            }
        }
    } catch (ex) {
        g_form.addErrorMessage("Error In Set Meta Data Function : " + ex);
    }
}


/*
Function to populate the below details by dynamically fetching it from the AppviewX policy..
	1. Certificate Attributes
	2. certificate catgeory
	3. CSR Type
	4. CA Account details
	5. AppViewX Policy.
*/


function onChange(control, oldValue, newValue, isLoading, isTemplate) {
    if (isLoading || newValue === '') {
        return;
    }
    try {
        var ga = new GlideAjax('get_ca_details');
        ga.addParam("sysparm_name", "getCaDetails");
        ga.addParam("sysparm_caTagName", newValue);
        ga.getXML(getCLMResponse);
    } catch (error) {
        g_form.addErrorMessage("Error: " + error + " Please check with the AppviewX admin/CLM Settings.");
        var message = 'Error occured while setting ca details in the form - ' + error;
        ga = new GlideAjax('avx_logger');
        ga.addParam("sysparm_name", "avxLogger");
        ga.addParam("sysparm_level", "Error");
        ga.addParam("sysparm_script", "set_ca_details");
        ga.addParam("sysparm_application", "AppViewX");
        ga.addParam("sysparm_message", message);
        ga.getXML(function() {});
    }

    function amazonCaResponse(response) {
        try {
            var answer = response.responseXML.documentElement.getAttribute('answer');
            try {
                answer = JSON.parse(answer);
            } catch (err) {
                throw "Couldn't parse Amazon Private CA certificate authority details.";
            }
            var amazon_response = answer.response[0].vendorSpecificSettings;
            g_form.setValue('ejbca_ca_details', JSON.stringify(amazon_response), JSON.stringify(amazon_response));
            var issuer_details = amazon_response.issuerDetails;
            g_form.setDisplay('region', true);
            g_form.setMandatory('region', true);
            g_form.addOption('region', '', 'Select');
            var reg_flag = 0;
            for (var reg = 0; reg < issuer_details.length; reg++) {
                if ((issuer_details[reg].certificateAuthorities).length > 0) {
                    g_form.addOption('region', issuer_details[reg].region, issuer_details[reg].region);
                    reg_flag = 1;
                }
            }
            if (reg_flag === 0) {
                throw "No Regions are configured under the certtificate authority.";
            }

        } catch (error) {
            g_form.addErrorMessage(error);
        }
    }

    function getCLMResponse(response) {
        try {
            var clm_response = response.responseXML.documentElement.getAttribute('answer');
            try {
                clm_response = JSON.parse(clm_response);
				var company_name = clm_response["company_name"];
            } catch (err) {
                throw clm_response || "Couldn't parse the CA policy details.";
            }
            var ga = new GlideAjax('get_cert_attributes');
			var test;
            ga.addParam("sysparm_name", "getCertificateAttributes");
			ga.addParam("sysparm_company", company_name);
			ga.addParam("sys_test", test);
            ga.getXML(function(response) {
                getResponse(response, clm_response);
            });
        } catch (error) {
            g_form.addErrorMessage("Error : " + error + " Please check with the AppviewX admin/CLM Settings.");
            var message = 'Error occured while fetching the cert attributes from AppViewX - ' + error;
            ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "set_ca_details");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
        }
    }

    function getResponse(response, clm_response) {
        try {
            var res = response.responseXML.documentElement.getAttribute('answer');
            try {
                res = JSON.parse(res);
            } catch (err) {
                throw res || "Couldn't parse the response while trying to get certificate attributes from AppViewX.";
            }
            res = res.response;
            var mandatory_attributes = [];
            for (var attr = 0; attr < res.length; attr++) {
                if (res[attr]["mandatory"] === true) {
                    mandatory_attributes.push(res[attr].name);
                }
            }
			var iterator;
            for (iterator = 1; iterator <= 30; iterator++) {
                g_form.setMandatory('meta_data_' + iterator, false);
                g_form.clearValue('meta_data_' + iterator);
                g_form.setDisplay('meta_data_' + iterator, false);
            }
            for (iterator = 1; iterator <= 10; iterator++) {
                g_form.setMandatory('custom_meta_data_' + iterator, false);
                g_form.clearValue('custom_meta_data_' + iterator);
                g_form.setDisplay('custom_meta_data_' + iterator, false);
            }
            if (clm_response['certificate_attributes']) {
                set_meta_data(clm_response['certificate_attributes'], mandatory_attributes);
            } else {
                g_form.setValue('cert_attribute_length', 0, 0);
            }
			g_form.clearValue('company_name');
			g_form.setValue('company_name', clm_response['company_name'], clm_response['company_name']);
            g_form.clearOptions('certificate_category');
            g_form.addOption('certificate_category', "", "Select");
            g_form.clearValue('certificate_policy');
            g_form.clearValue('ca_account');
            g_form.clearOptions('csr_input_method');
            g_form.addOption('csr_input_method', "", "Select");
			g_form.clearValue('enable_san_fields');
			g_form.setValue('enable_san_fields', clm_response['enable_san_fields'], clm_response['enable_san_fields']);
			g_form.clearValue('san_names');
			g_form.setValue('san_names', JSON.stringify(clm_response['subject_alternative_names']), JSON.stringify(clm_response['subject_alternative_names']));
			g_form.clearValue('csr_parameter_values');
			var csr_parameters = clm_response['csr_parameters'];
			csr_parameters = csr_parameters.replaceAll(", ", ",");
			g_form.setValue('csr_parameter_values', csr_parameters, csr_parameters);
            var cert_retrieval_format = clm_response['certificate_retrieval_file_format'];
            g_form.setValue('certificate_issuance_file_formats', cert_retrieval_format, cert_retrieval_format);
            if (!clm_response.certificate_authority) {
                throw "Certificate authority is not configured in CLM table";
            }
            var CA = clm_response['certificate_authority'];
            g_form.setValue('certificate_authority', clm_response['certificate_authority'], clm_response['certificate_authority']);
            if (!clm_response.cert_category) {
                throw 'Cert catgory is not configured in CLM table';
            }
            g_form.setValue('validate_ca_account', clm_response['ca_account'], clm_response['ca_account']);
            var val = clm_response['cert_category'].split(",");
            for (var category = 0; category < val.length; category++) {
                g_form.addOption('certificate_category', val[category].replace(" ", ""), val[category].replace(" ", ""));
                if (category === 0) {
                    g_form.setValue('msca_category', val[category].replace(" ", ""), val[category].replace(" ", ""));
                }
            }
            g_form.setValue('certificate_category', '', 'Select');


			
            if (!clm_response.csr_type) {
                throw 'CSR type is not configured in CLM table';
            }
            val = clm_response['csr_type'].split(",");
            if (clm_response.certificate_authority === 'Amazon') {
                g_form.addOption('csr_input_method', 'Manual', 'Manual');
            } else {
                for (var csr_method = 0; csr_method < val.length; csr_method++) {
                    g_form.addOption('csr_input_method', (val[csr_method]).trim(), (val[csr_method]).trim());
                }
            }
            g_form.setValue('csr_input_method', "", "Select");
            if (CA === 'Amazon Private CA') {
                g_form.setMandatory('csr_input_method', false);
                g_form.setDisplay('csr_input_method', false);
                var ajax = new GlideAjax('get_ejbca_details');
                ajax.addParam('sysparm_name', 'getEjbcaDetails');
                ajax.addParam('certificate_authority', encodeURIComponent(CA));
                ajax.getXML(amazonCaResponse);
            } else {
                g_form.setDisplay('csr_input_method', true);
                g_form.setMandatory('csr_input_method', true);
            }
            if (!clm_response.ca_policy) {
                throw 'Certificate policy is not available';
            }
            g_form.setValue('certificate_policy', clm_response['ca_policy'], clm_response['ca_policy']);
            var certificate_retrieval_mode = clm_response['certificate_retrieval_mode'];
            g_form.clearValue('certificate_retrieval_mode');
            g_form.setValue('certificate_retrieval_mode', certificate_retrieval_mode, certificate_retrieval_mode);
            if (clm_response['certificate_retrieval_mode'] === "Send to User Input Email"|| clm_response['certificate_retrieval_mode'] === "Attach to RITM and Email to User Input" ) {
                g_form.clearValue('email_id');
                g_form.setDisplay('email_id', true);
                g_form.setMandatory('email_id', true);

            } else if (clm_response['certificate_retrieval_mode'] === "Send to Certificate Requestor Email" || clm_response['certificate_retrieval_mode'] === "Attach to RITM and Send to Requestor" ) {
                g_form.clearValue('email_id');
                g_form.setDisplay('email_id', true);
                g_form.setMandatory('email_id', true);
                if (clm_response.logged_in_user_email) {
                    g_form.setValue('email_id', clm_response.logged_in_user_email, clm_response.logged_in_user_email);
                    g_form.setReadOnly('email_id', true);
                } else {
                    g_form.addInfoMessage('Requestor Email is not configured kindly enter the mail id');
                }
            } else {
                g_form.clearValue('email_id');
                g_form.setMandatory('email_id', false);
                g_form.setDisplay('email_id', false);
            }
            g_form.setDisplay('push_to_end_device', false);
            g_form.clearValue('push_to_end_device');
            g_form.setMandatory('device_name', false);
            g_form.setDisplay('device_name', false);
            g_form.clearValue('device_name');
            g_form.clearOptions('device_name');
            g_form.setMandatory('vendor_name', false);
            g_form.setDisplay('vendor_name', false);
            g_form.clearValue('vendor_name');
            g_form.clearOptions('vendor_name');
            g_form.setMandatory('profile_name', false);
            g_form.setDisplay('profile_name', false);
            g_form.clearValue('profile_name');
            g_form.clearOptions('profile_name');
            g_form.setMandatory('push_assignment_group', false);
            g_form.setDisplay('push_assignment_group', false);
            g_form.clearValue('push_assignment_group');
            g_form.clearValue('push_enabled_or_disabled');
            g_form.setValue('push_enabled_or_disabled', clm_response['push_to_end_device'], clm_response['push_to_end_device']);
            if (clm_response['push_to_end_device'] == '1') {
                g_form.setDisplay('push_to_end_device', true);
                if (clm_response['vendor_name']) {
                    var vendor_names = clm_response['vendor_name'].split(",");
                    g_form.addOption('vendor_name', '', 'Select');
                    for (var vendor = 0; vendor < vendor_names.length; vendor++) {
                        g_form.addOption('vendor_name', vendor_names[vendor], vendor_names[vendor]);
                    }
                }
            }
			g_form.clearValue('ticket_assignment_group');
			g_form.setMandatory('ticket_assignment_group', false);
			g_form.setDisplay('ticket_assignment_group', false);
			g_form.clearValue('ticket_assignment_group_value');
			var ticket_assignment_group_value = clm_response['ticket_assignment_group'];
			g_form.setValue('ticket_assignment_group_value', ticket_assignment_group_value, ticket_assignment_group_value);
			if (ticket_assignment_group_value == "Allow user to select assignment group") {
				g_form.setDisplay('ticket_assignment_group', true);
				g_form.setMandatory('ticket_assignment_group', true);
			}
            g_form.clearValue('send_certificate_to_end_user');
            g_form.setValue('send_certificate_to_end_user', clm_response['send_certificate'], clm_response['send_certificate']);
            g_form.clearValue('cmdb_sync');
            g_form.setValue('cmdb_sync', clm_response['cmdb_sync'], clm_response['cmdb_sync']);
            g_form.clearValue('assignment_group_selection');
            g_form.setValue('assignment_group_selection', clm_response['assignment_group_selection'], clm_response['assignment_group_selection']);
            g_form.setDisplay('san_fields', false);
            g_form.clearValue('add_dns_values');
            g_form.setDisplay('add_dns_values', false);
            g_form.clearValue('add_ip_address');
            g_form.setDisplay('add_ip_address', false);
            g_form.clearValue('add_email_address');
            g_form.setDisplay('add_email_address', false);
            g_form.clearOptions('entrust_certificate_type');
            g_form.setMandatory('entrust_certificate_type', false);
            g_form.setDisplay('entrust_certificate_type', false);
            g_form.clearOptions('microsoft_template');
            g_form.setMandatory('microsoft_template', false);
            g_form.setDisplay('microsoft_template', false);
            g_form.clearOptions('division');
            g_form.setMandatory('division', false);
            g_form.setDisplay('division', false);
            g_form.clearOptions('certificate_type');
            g_form.setMandatory('certificate_type', false);
            g_form.setDisplay('certificate_type', false);
            g_form.clearValue('upload_csr');
            g_form.setMandatory('upload_csr', false);
            g_form.setDisplay('upload_csr', false);
            g_form.clearValue('paste_csr');
            g_form.setMandatory('paste_csr', false);
            g_form.setDisplay('paste_csr', false);
            g_form.clearOptions('server_type');
            g_form.setMandatory('server_type', false);
            g_form.setDisplay('server_type', false);
            g_form.clearValue('ca_policy_details');
            if (CA !== 'Amazon Private CA') {
                g_form.clearValue('ejbca_ca_details');
                g_form.clearOptions('region');
                g_form.clearValue('region');
                g_form.setMandatory('region', false);
                g_form.setDisplay('region', false);
                g_form.clearOptions('issuer');
                g_form.clearValue('issuer');
                g_form.setMandatory('issuer', false);
                g_form.setDisplay('issuer', false);
            }
            g_form.setMandatory('push_root_and_intermediate_certificates', false);
            g_form.setDisplay('push_root_and_intermediate_certificates', false);
            g_form.setValue('push_root_and_intermediate_certificates', false, false);
            g_form.clearOptions('push_certificate_format');
            g_form.setMandatory('push_certificate_format', false);
            g_form.setDisplay('push_certificate_format', false);
            g_form.clearValue('push_certificate_format');
            g_form.setReadOnly('customize_push_location', false);
            g_form.clearValue('customize_push_location');
            g_form.setDisplay('customize_push_location', false);
            g_form.clearValue('service_restart');
            g_form.setDisplay('service_restart', false);
            g_form.clearValue('private_key_in_device');
            g_form.setDisplay('private_key_in_device', false);
            g_form.clearValue('apache_certificate_directory');
            g_form.setMandatory('apache_certificate_directory', false);
            g_form.setDisplay('apache_certificate_directory', false);
            g_form.clearValue('apache_key_directory');
            g_form.setMandatory('apache_key_directory', false);
            g_form.setDisplay('apache_key_directory', false);
            g_form.clearValue('apache_intermediate_and_ca_certificate_directory');
            g_form.setMandatory('apache_intermediate_and_ca_certificate_directory', false);
            g_form.setDisplay('apache_intermediate_and_ca_certificate_directory', false);

            /* Hiding all the CSR parameters from the form during the when ca tag is changed.*/
            g_form.setMandatory('csr_upload_option', false);
            g_form.setDisplay('csr_upload_option', false);
            g_form.clearValue('common_name');
            g_form.setMandatory('common_name', false);
            g_form.setDisplay('common_name', false);
            g_form.clearValue('dns');
            g_form.setDisplay('dns', false);
            g_form.clearValue('san_email');
            g_form.setDisplay('san_email', false);
            g_form.clearValue('ip_address');
            g_form.setDisplay('ip_address', false);
            g_form.clearValue('organization');
            g_form.setMandatory('organization', false);
            g_form.setDisplay('organization', false);
            g_form.clearValue('organization_unit');
            g_form.setDisplay('organization_unit', false);
            g_form.clearValue('locality');
            g_form.setDisplay('locality', false);
            g_form.clearValue('challenge_password');
            g_form.setDisplay('challenge_password', false);
            g_form.clearValue('state');
            g_form.setDisplay('state', false);
            g_form.clearValue('country');
            g_form.setMandatory('country', false);
            g_form.setDisplay('country', false);
            g_form.clearValue('email_address');
            g_form.setMandatory('email_address', false);
            g_form.setDisplay('email_address', false);
            g_form.clearOptions('validity_unit');
            g_form.clearValue('validity_unit');
            g_form.setMandatory('validity_unit', false);
            g_form.setDisplay('validity_unit', false);
            g_form.clearOptions('validity_value');
            g_form.clearValue('validity_value');
            g_form.setMandatory('validity_value', false);
            g_form.setDisplay('validity_value', false);
            g_form.clearOptions('hash_function');
            g_form.clearValue('hash_function');
            g_form.setMandatory('hash_function', false);
            g_form.setDisplay('hash_function', false);
            g_form.clearOptions('key_type');
            g_form.clearValue('key_type');
            g_form.setMandatory('key_type', false);
            g_form.setDisplay('key_type', false);
            g_form.clearOptions('bit_length');
            g_form.clearValue('bit_length');
            g_form.setMandatory('bit_length', false);
            g_form.setDisplay('bit_length', false);
            g_form.clearOptions('ca_signing_algorithm');
            g_form.clearValue('ca_signing_algorithm');
            g_form.setMandatory('ca_signing_algorithm', false);
            g_form.setDisplay('ca_signing_algorithm', false);
            g_form.clearOptions('ecdsa_curve');
            g_form.clearValue('ecdsa_curve');
            g_form.setMandatory('ecdsa_curve', false);
            g_form.setDisplay('ecdsa_curve', false);
            g_form.setMandatory('certificate_category', false);
            g_form.setDisplay('certificate_category', false);
            g_form.clearOptions('ejbca_end_entity_profile_name');
            g_form.setMandatory('ejbca_end_entity_profile_name', false);
            g_form.setDisplay('ejbca_end_entity_profile_name', false);
            g_form.clearValue('ejbca_end_entity_user_name');
            g_form.setDisplay('ejbca_end_entity_user_name', false);
            g_form.clearOptions('ejbca_issuer_common_name');
            g_form.setMandatory('ejbca_issuer_common_name', false);
            g_form.setDisplay('ejbca_issuer_common_name', false);
            g_form.clearOptions('ejbca_certificate_profile_name');
            g_form.setMandatory('ejbca_certificate_profile_name', false);
            g_form.setDisplay('ejbca_certificate_profile_name', false);
            g_form.clearOptions('sectigo_certificate_type');
            g_form.setMandatory('sectigo_certificate_type', false);
            g_form.setDisplay('sectigo_certificate_type', false);
            g_form.clearOptions('sectigo_server_type');
            g_form.setMandatory('sectigo_server_type', false);
            g_form.setDisplay('sectigo_server_type', false);
            g_form.clearOptions('godaddy_certificate_type');
            g_form.setMandatory('godaddy_certificate_type', false);
            g_form.setDisplay('godaddy_certificate_type', false);
            g_form.clearOptions('godaddy_slot_size');
            g_form.setMandatory('godaddy_slot_size', false);
            g_form.setDisplay('godaddy_slot_size', false);
            g_form.setDisplay('subject_alternative_name', false);
            g_form.clearValue('certificate_validation_type');
            g_form.setMandatory('certificate_validation_type', false);
            g_form.setDisplay('certificate_validation_type', false);
            g_form.clearValue('certificate_validation_type');
            g_form.setMandatory('certificate_transparency_logging_preference', false);
            g_form.setDisplay('certificate_transparency_logging_preference', false);
            g_form.clearValue('certificate_transparency_logging_preference');
            g_form.clearValue('profile_name_reference');
            g_form.setMandatory('profile_name_reference', false);
            g_form.setDisplay('profile_name_reference', false);
            g_form.clearOptions('globalsign_certificate_type');
            g_form.setMandatory('globalsign_certificate_type', false);
            g_form.setDisplay('globalsign_certificate_type', false);
            g_form.clearOptions('domain_admin_email');
            g_form.setMandatory('domain_admin_email', false);
            g_form.setDisplay('domain_admin_email', false);
            g_form.clearOptions('business_category');
            g_form.setMandatory('business_category', false);
            g_form.setDisplay('business_category', false);
            g_form.clearValue('designation');
            g_form.setMandatory('designation', false);
            g_form.setDisplay('designation', false);
            g_form.clearValue('incorporating_agency_reg_no');
            g_form.setMandatory('incorporating_agency_reg_no', false);
            g_form.setDisplay('incorporating_agency_reg_no', false);
            g_form.clearValue('globalsign_mssl_certificate_type');
            g_form.setMandatory('globalsign_mssl_certificate_type', false);
            g_form.setDisplay('globalsign_mssl_certificate_type', false);
            g_form.clearValue('globalsign_mssl_profile_name');
            g_form.setMandatory('globalsign_mssl_profile_name', false);
            g_form.setDisplay('globalsign_mssl_profile_name', false);
			g_form.clearOptions('trustwave_certificate_type');
            g_form.clearValue('trustwave_certificate_type');
            g_form.setMandatory('trustwave_certificate_type', false);
            g_form.setDisplay('trustwave_certificate_type', false);
			g_form.clearOptions('avx_issuer_name');
            g_form.clearValue('avx_issuer_name');
            g_form.setMandatory('avx_issuer_name', false);
            g_form.setDisplay('avx_issuer_name', false);
			g_form.clearOptions('avx_issuer_location');
            g_form.clearValue('avx_issuer_location');
            g_form.setMandatory('avx_issuer_location', false);
            g_form.setDisplay('avx_issuer_location', false);
			g_form.clearValue('organization_address');
			g_form.setDisplay('organization_address', false);
			g_form.clearValue('csr_zip_code');
			g_form.setDisplay('csr_zip_code', false);
			g_form.clearOptions('hydrantid_policy_name');
            g_form.clearValue('hydrantid_policy_name');
            g_form.setMandatory('hydrantid_policy_name', false);
            g_form.setDisplay('hydrantid_policy_name', false);
			g_form.clearOptions('digicert_mpki_profiles');
            g_form.clearValue('digicert_mpki_profiles');
            g_form.setMandatory('digicert_mpki_profiles', false);
            g_form.setDisplay('digicert_mpki_profiles', false);
			g_form.clearValue('digicert_mpki_ca_details');
			g_form.clearOptions('swisssign_client_name');
            g_form.clearValue('swisssign_client_name');
            g_form.setMandatory('swisssign_client_name', false);
            g_form.setDisplay('swisssign_client_name', false);
			g_form.clearOptions('swisssign_product');
            g_form.clearValue('swisssign_product');
            g_form.setMandatory('swisssign_product', false);
            g_form.setDisplay('swisssign_product', false);
			g_form.clearValue('parsed_csr_values');
			g_form.setDisplay('parsed_csr_values', false);
        } catch (error) {
            g_form.addErrorMessage("Error: " + error + " Please check with the AppviewX admin/CLM Settings.");
            var message = 'Error occured while setting ca details in the form - ' + error;
            var ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "set_ca_details");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
        }

    }
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-26 16:06:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>30e144f51b65d550cda7db91dd4bcbf3</sys_id>
        <sys_mod_count>147</sys_mod_count>
        <sys_name>set_ca_details</sys_name>
        <sys_overrides/>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>catalog_script_client_30e144f51b65d550cda7db91dd4bcbf3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-22 10:01:29</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <va_supported>false</va_supported>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
