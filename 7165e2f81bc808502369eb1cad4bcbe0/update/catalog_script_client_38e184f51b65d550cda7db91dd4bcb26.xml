<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Enroll Certificate">d830d29c1bc91d1061858480cd4bcbe1</cat_item>
        <cat_variable>IO:3813fe141bcd1d1061858480cd4bcb85</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>set_validity_value</name>
        <order/>
        <published_ref/>
        <script><![CDATA[    function onChange(control, oldValue, newValue, isLoading, isTemplate) {
        if (isLoading || newValue === '') {
            return;
        }
        try {
            var CA = g_form.getValue('certificate_authority');
            var ca_account = g_form.getValue('ca_account');
            var ca_policy = g_form.getValue('ca_policy_details');
            var certificate_category = g_form.getValue('certificate_category');
            var division_type = g_form.getValue('division');
            var certificate_type = g_form.getValue('certificate_type');
            var sectigo_certificate_type = g_form.getValue('sectigo_certificate_type');
            var entrust_certificate_type = g_form.getValue('entrust_certificate_type');
            var godaddy_certificate_type = g_form.getValue('godaddy_certificate_type');
            var globalsign_certificate_type = g_form.getValue('globalsign_certificate_type');
            var globalsign_mssl_certificate_type = g_form.getValue('globalsign_mssl_certificate_type');
            var trustwave_certificate_type = g_form.getValue('trustwave_certificate_type');
            var hydrantid_policy_name = g_form.getValue('hydrantid_policy_name');
            var amazon_issuer = g_form.getValue('issuer');
            var validity_unit = g_form.getValue('validity_unit');
            var swisssign_client_name = g_form.getValue('swisssign_client_name');
            var swisssign_product = g_form.getValue('swisssign_product');
            var i, j, k, v_unit, v_val;
            try {
                ca_policy = JSON.parse(ca_policy);
            } catch (err) {
                throw "Couldn't parse ca policy details.";
            }
            if (CA === 'DigiCert') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    var result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var digicert_divisions = result.caSettings;
                        for (var div = 0; div < digicert_divisions.length; div++) {
                            if (digicert_divisions[div].name === ca_account) {
                                if (!digicert_divisions[div].divisions) {
                                    throw 'Digicert division details is not configured in AppviewX Policy.';
                                }
                                var division = digicert_divisions[div].divisions;
                                for (j = 0; j < division.length; j++) {
                                    if (division[j].name == division_type) {
                                        if (!division[j].certTypes) {
                                            throw 'Certificate types are not configured in AppviewX Policy.';
                                        }
                                        var cert_type = division[j].certTypes;
                                        for (k = 0; k < cert_type.length; k++) {
                                            if ((cert_type[k].type).toLowerCase() == certificate_category.toLowerCase() && cert_type[k].name == certificate_type) {
                                                var keys = Object.keys(cert_type[k].validityPeriods || cert_type[k].orderValidityPeriods);
                                                var validity_periods = cert_type[k].validityPeriods || cert_type[k].orderValidityPeriods;
                                                for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                                    if (keys[v_unit].includes(validity_unit)) {
                                                        validity_unit = keys[v_unit];
                                                        var validity = validity_periods[validity_unit];
                                                        for (v_val = 0; v_val < validity.length; v_val++) {
                                                            g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                        }
                                                        g_form.setValue('validity_value', '', 'Select');
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
            }
            if (CA === 'AppViewX' || CA === 'AppViewX PKIaaS') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (var val = 0; val < ca_policy.length; val++) {
                    result = ca_policy[val];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var caSetting = result.caSettings;
                        for (var ca = 0; ca < caSetting.length; ca++) {
                            if (caSetting[ca].name === ca_account) {
                                keys = Object.keys(caSetting[ca].validityPeriods);
                                for (var val_unit = 0; val_unit < keys.length; val_unit++) {
                                    if (keys[val_unit].includes(validity_unit)) {
                                        validity_unit = keys[val_unit];
                                        break;
                                    }
                                }
                                if (validity_unit in caSetting[ca].validityPeriods) {
                                    var validity1 = caSetting[ca].validityPeriods[validity_unit];
                                    for (var v_validity = 0; v_validity < validity1.length; v_validity++) {
                                        g_form.addOption('validity_value', validity1[v_validity], validity1[v_validity]);
                                    }
                                    g_form.setValue('validity_value', '', 'Select');
                                } else {
                                    throw 'Vaidity details are not configured in AppviewX policy.';
                                }
                            }
                        }
                    }
                }
            }
            if (CA === 'SwissSign') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (var iterator = 0; iterator < ca_policy.length; iterator++) {
                    var result = ca_policy[iterator];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account settings is not configured in AppViewX Policy';
                        }
                        var swisssign_ca_settings = result.caSettings;
                        for (var div = 0; div < swisssign_ca_settings.length; div++) {
                            if (swisssign_ca_settings[div].name === ca_account) {
                                if (!swisssign_ca_settings[div].clients) {
                                    throw 'Client details are missing in the policy.';
                                }
                                var swisssign_clients = swisssign_ca_settings[div].clients;
                                for (var client = 0; client < swisssign_clients.length; client++) {
                                    if (swisssign_clients[client].name === swisssign_client_name) {
                                        if (!swisssign_clients[client].certTypes) {
                                            throw 'Certificate types are not configured in AppviewX Policy.';
                                        }
                                        var cert_types = swisssign_clients[client].certTypes;
                                        for (var cert_type = 0; cert_type < cert_types.length; cert_type++) {
                                            if (cert_types[cert_type].name === swisssign_product) {
                                                if (!cert_types[cert_type].validityPeriods) {
                                                    throw 'Validity Periods are not configured in AppviewX policy.';
                                                }
                                                keys = Object.keys(cert_types[cert_type].validityPeriods);
                                                for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                                    if (keys[v_unit].includes(validity_unit)) {
                                                        validity_unit = keys[v_unit];
                                                        validity = cert_types[cert_type].validityPeriods[validity_unit];
                                                        for (v_val = 0; v_val < validity.length; v_val++) {
                                                            g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                        }
                                                        g_form.setValue('validity_value', '', 'Select');
                                                    }
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
            }
            if (CA === 'Entrust') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var entrust_casettings = result.caSettings;
                        for (var en_settings = 0; en_settings < entrust_casettings.length; en_settings++) {
                            if (entrust_casettings[en_settings].name == ca_account) {
                                if (!entrust_casettings[en_settings].certTypes) {
                                    throw 'Certificate types are not configured in AppviewX Policy.';
                                }
                                cert_type = entrust_casettings[en_settings].certTypes;
                                for (k = 0; k < cert_type.length; k++) {
                                    if ((cert_type[k].type).toLowerCase() == certificate_category.toLowerCase() && cert_type[k].name == entrust_certificate_type) {
                                        keys = Object.keys(cert_type[k].validityPeriods);
                                        for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                            if (keys[v_unit].includes(validity_unit)) {
                                                validity_unit = keys[v_unit];
                                                validity = cert_type[k].validityPeriods[validity_unit];
                                                for (v_val = 0; v_val < validity.length; v_val++) {
                                                    g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                }
                                                g_form.setValue('validity_value', '', 'Select');
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CA === 'Trustwave') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var trustwave_casettings = result.caSettings;
                        for (var tw_settings = 0; tw_settings < trustwave_casettings.length; tw_settings++) {
                            if (trustwave_casettings[tw_settings].name == ca_account) {
                                if (!trustwave_casettings[tw_settings].certTypes) {
                                    throw 'Certificate types are not configured in AppviewX Policy.';
                                }
                                cert_type = trustwave_casettings[tw_settings].certTypes;
                                for (k = 0; k < cert_type.length; k++) {
                                    if ((cert_type[k].type).toLowerCase() == certificate_category.toLowerCase() && cert_type[k].name == trustwave_certificate_type) {
                                        keys = Object.keys(cert_type[k].validityPeriods);
                                        for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                            if (keys[v_unit].includes(validity_unit)) {
                                                validity_unit = keys[v_unit];
                                                validity = cert_type[k].validityPeriods[validity_unit];
                                                for (v_val = 0; v_val < validity.length; v_val++) {
                                                    g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                }
                                                g_form.setValue('validity_value', '', 'Select');
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CA === 'GoDaddy') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var godaddy_casettings = result.caSettings;
                        for (var gd_settings = 0; gd_settings < godaddy_casettings.length; gd_settings++) {
                            if (godaddy_casettings[gd_settings].name == ca_account) {
                                if (!godaddy_casettings[gd_settings].certTypes) {
                                    throw 'Certificate types are not configured in AppviewX Policy.';
                                }
                                cert_type = godaddy_casettings[gd_settings].certTypes;
                                for (k = 0; k < cert_type.length; k++) {
                                    if ((cert_type[k].type).toLowerCase() == certificate_category.toLowerCase() && cert_type[k].name == godaddy_certificate_type) {
                                        keys = Object.keys(cert_type[k].validityPeriods);
                                        for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                            if (keys[v_unit].includes(validity_unit)) {
                                                validity_unit = keys[v_unit];
                                                validity = cert_type[k].validityPeriods[validity_unit];
                                                for (v_val = 0; v_val < validity.length; v_val++) {
                                                    g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                }
                                                g_form.setValue('validity_value', '', 'Select');
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CA === 'Comodo Certificate Manager') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Polic.y';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var sectigo_settings = result.caSettings;
                        for (var sec = 0; sec < sectigo_settings.length; sec++) {
                            if (sectigo_settings[sec].name === ca_account) {
                                if (!sectigo_settings[sec].certTypes) {
                                    throw 'Sectigo Certificate types are not configured in AppviewX Policy.';
                                }
                                cert_type = sectigo_settings[sec].certTypes;
                                for (var sec_type = 0; sec_type < cert_type.length; sec_type++) {
                                    if ((cert_type[sec_type].type).toLowerCase() == certificate_category.toLowerCase() && cert_type[sec_type].name == sectigo_certificate_type) {
                                        keys = Object.keys(cert_type[sec_type].validityPeriods);
                                        for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                            if (keys[v_unit].includes(validity_unit)) {
                                                validity_unit = keys[v_unit];
                                                validity = cert_type[sec_type].validityPeriods[validity_unit];
                                                for (v_val = 0; v_val < validity.length; v_val++) {
                                                    g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                }
                                                g_form.setValue('validity_value', '', 'Select');
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
            }
            if (CA === 'Amazon Private CA'){
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Polic.y';
                    }
                    if (result.certificateAuthority === CA){
                        if (!result.multipleAccountDetails) {
                            throw 'Multiple Account Details is not configured in AppviewX Policy.';
                        }
                        var multiple_accounts = result.multipleAccountDetails;
                        for (var acc = 0; acc < multiple_accounts.length; acc++){
                            if (multiple_accounts[acc].caSettings.issuerName === amazon_issuer){
                                if (!multiple_accounts[acc].caSettings.validityPeriods) {
                                    throw 'Validity details are missing in the AppviewX policy.';
                                }
                                keys = Object.keys(multiple_accounts[acc].caSettings.validityPeriods);
                                for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                    if (keys[v_unit].includes(validity_unit)) {
                                        validity_unit = keys[v_unit];
                                        validity = multiple_accounts[acc].caSettings.validityPeriods[validity_unit];
                                        for (v_val = 0; v_val < validity.length; v_val++) {
                                            g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                        }
                                        g_form.setValue('validity_value', '', 'Select');
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
            }
            if (CA === 'GlobalSign') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.clearValue('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var globalsign_casettings = result.caSettings;
                        for (var gs_settings = 0; gs_settings < globalsign_casettings.length; gs_settings++) {
                            if (globalsign_casettings[gs_settings].name == ca_account) {
                                if (!globalsign_casettings[gs_settings].certTypes) {
                                    throw 'Certificate types are not configured in AppviewX Policy.';
                                }
                                cert_type = globalsign_casettings[gs_settings].certTypes;
                                for (k = 0; k < cert_type.length; k++) {
                                    if ((cert_type[k].type).toLowerCase() == certificate_category.toLowerCase() && cert_type[k].name == globalsign_certificate_type) {
                                        keys = Object.keys(cert_type[k].validityPeriods);
                                        for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                            if (keys[v_unit].includes(validity_unit)) {
                                                validity_unit = keys[v_unit];
                                                validity = cert_type[k].validityPeriods[validity_unit];
                                                for (v_val = 0; v_val < validity.length; v_val++) {
                                                    g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                }
                                                g_form.setValue('validity_value', '', 'Select');
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CA === 'GlobalSignMSSL') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.clearValue('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var gs_mssl_casettings = result.caSettings;
                        for (var gsmssl_settings = 0; gsmssl_settings < gs_mssl_casettings.length; gsmssl_settings++) {
                            if (gs_mssl_casettings[gsmssl_settings].name == ca_account) {
                                if (!gs_mssl_casettings[gsmssl_settings].certTypes) {
                                    throw 'Certificate types are not configured in AppviewX Policy.';
                                }
                                cert_type = gs_mssl_casettings[gsmssl_settings].certTypes;
                                for (k = 0; k < cert_type.length; k++) {
                                    if ((cert_type[k].type).toLowerCase() == certificate_category.toLowerCase() && cert_type[k].name == globalsign_mssl_certificate_type) {
                                        keys = Object.keys(cert_type[k].validityPeriods);
                                        for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                            if (keys[v_unit].includes(validity_unit)) {
                                                validity_unit = keys[v_unit];
                                                validity = cert_type[k].validityPeriods[validity_unit];
                                                for (v_val = 0; v_val < validity.length; v_val++) {
                                                    g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                }
                                                g_form.setValue('validity_value', '', 'Select');
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CA === 'HydrantID') {
                g_form.setMandatory('validity_value', true);
                g_form.setDisplay('validity_value', true);
                g_form.clearOptions('validity_value');
                g_form.addOption('validity_value', '', 'Select');
                for (i = 0; i < ca_policy.length; i++) {
                    result = ca_policy[i];
                    if (!result.certificateAuthority) {
                        throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                    }
                    if (result.certificateAuthority === CA) {
                        if (!result.caSettings) {
                            throw 'CA Account Details is not configured in AppViewX Policy.';
                        }
                        var hydrant_casettings = result.caSettings;
                        for (var hd_settings = 0; hd_settings < hydrant_casettings.length; hd_settings++) {
                            if (hydrant_casettings[hd_settings].name == ca_account) {
                                if (!hydrant_casettings[hd_settings].certTypes) {
                                    throw 'Certificate types are not configured in AppviewX Policy.';
                                }
                                cert_type = hydrant_casettings[hd_settings].certTypes;
                                for (k = 0; k < cert_type.length; k++) {
                                    if ((cert_type[k].type).toLowerCase() == certificate_category.toLowerCase() && cert_type[k].name == hydrantid_policy_name) {
                                        keys = Object.keys(cert_type[k].validityPeriods);
                                        for (v_unit = 0; v_unit < keys.length; v_unit++) {
                                            if (keys[v_unit].includes(validity_unit)) {
                                                validity_unit = keys[v_unit];
                                                validity = cert_type[k].validityPeriods[validity_unit];
                                                for (v_val = 0; v_val < validity.length; v_val++) {
                                                    g_form.addOption('validity_value', validity[v_val], validity[v_val]);
                                                }
                                                g_form.setValue('validity_value', '', 'Select');
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (error) {
            g_form.addErrorMessage("Error: " + error + " Please check with the AppviewX admin/CLM Settings.");
            var message = 'Error occured while setting validity value in the form - ' + error;
            var ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "set_validity_value");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
        }
    }]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-26 16:06:02</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>38e184f51b65d550cda7db91dd4bcb26</sys_id>
        <sys_mod_count>40</sys_mod_count>
        <sys_name>set_validity_value</sys_name>
        <sys_overrides/>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>catalog_script_client_38e184f51b65d550cda7db91dd4bcb26</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-01 08:22:09</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <va_supported>true</va_supported>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
