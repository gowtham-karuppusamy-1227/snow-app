<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Revoke Certificate">b1c71c1c1b411d1061858480cd4bcb0f</cat_item>
        <cat_variable>IO:045a58dc1b411d1061858480cd4bcb0c</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>revoke_set_certificates</name>
        <order/>
        <published_ref/>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading) {
    if (isLoading || newValue == '') {
        return;
    }
    try {
        var gb = new GlideAjax('renew_get_certificate_authority_name');
        var ca_tag_name = g_form.getValue('ca_tag_name');
        var cert_authority = g_form.getValue('certificate_authority');
        var cert_type = g_form.getValue('certificate_category');
		var company_name = g_form.getValue('company_name');
        gb.addParam("sysparm_name", "getCaDetails");
        gb.addParam("sysparm_caTagName", ca_tag_name);
		gb.addParam("sysparm_company", company_name);
        gb.getXML(getclmvalue);
    } catch (error) {
        g_form.addErrorMessage("Error: " + error);
        var message = 'Error occurred while fetching certificates from AppViewX - ' + error;
        var ga = new GlideAjax('avx_logger');
        ga.addParam("sysparm_name", "avxLogger");
        ga.addParam("sysparm_level", "Error");
        ga.addParam("sysparm_script", "renew_set_certificates");
        ga.addParam("sysparm_application", "AppViewX");
        ga.addParam("sysparm_message", message);
        ga.getXML(function() {});
    }

    function getclmvalue(response) {
        var res = response.responseXML.documentElement.getAttribute('answer');
        try {
            try {
                res = JSON.parse(res);
            } catch (err) {
                throw new Error(res || "Could not parse JSON response.");
            }

            var certs_fetch = res['certificates_fetch_revoke'];
            var loggedin_user_roles = res['loggedin_user_roles'];
            var cmdb_sync = res['cmdb_sync'];
			var company_name = g_form.getValue('company_name');

            if (certs_fetch === 'Based on ServiceNow' || certs_fetch === 'Based on User Group In ServiceNow' || certs_fetch === 'Get All Certificates') {
                var ga = new GlideAjax('renew_get_cert'); //this is the script include
                ga.addParam("sysparm_name", "getCert");
                ga.addParam("sysparm_certs_fetch", certs_fetch);
                ga.addParam("sysparm_cert_authority", cert_authority);
                ga.addParam("sysparm_cert_type", cert_type);
                ga.addParam("sysparm_clm_action", "Revoke");
				ga.addParam("sysparm_company", company_name);
                ga.getXML(function(response) {
                    getResponse(response, certs_fetch, loggedin_user_roles, cmdb_sync);
                });
            } else {
                var cert_fetch = "AVX";

                ga = new GlideAjax('renew_get_cert_based_on_appviewx'); //this is the script include
                ga.addParam("sysparm_name", "getCert");
                ga.addParam("sysparm_cert_authority", cert_authority);
				ga.addParam("sysparm_ca_tag", ca_tag_name);
                ga.addParam("sysparm_cert_type", cert_type);
                ga.addParam('sysparm_clm_action', 'Revoke');
				ga.addParam("sysparm_company", company_name);
                ga.getXML(function(response) {
                    getResponse(response, certs_fetch, loggedin_user_roles, cmdb_sync);
                });
            }

        } catch (error) {
            g_form.addErrorMessage("Error: " + error);
            var message = 'Error occurred while fetching certificates from AppViewX - ' + error;
            ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "renew_set_certificates");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
        }
    }

    function getResponse(response, certs_fetch, loggedin_user_roles, cmdb_sync) {
        try {
			var iterator;
            var res = response.responseXML.documentElement.getAttribute('answer');

            try {
                res = JSON.parse(res);
            } catch (err) {
                throw res || "Couldn't parse the response while trying to get certificates from AppViewX";
            }
            for (iterator = 0; iterator < loggedin_user_roles.length; iterator++) {
                if (loggedin_user_roles[iterator] === "x_avx_appviewx_aut.app_admin" || loggedin_user_roles[iterator] === "admin" || loggedin_user_roles[iterator] === "x_avx_appviewx_aut.super_admin") {
                    var loggedin_user = "exist";
                    break;
                }
            }
            if (cmdb_sync == 'true') {
				var encoded_query = res['encoded_query'];
				if (encoded_query) {
					g_form.setValue('query_value', encoded_query, encoded_query);
					g_form.clearValue('certificate_reference');
					g_form.setDisplay('certificate_reference', true);
					g_form.setMandatory('certificate_reference', true);
				} else {
					throw "Couldn't generate query for the logged-in user";
				}
            } else {
				g_form.clearOptions('certificates');
				g_form.setDisplay('certificates', true);
				g_form.setMandatory('certificates', true);
				g_form.addOption('certificates', '', 'Select');
                if (certs_fetch === 'Based on AppViewX' && loggedin_user !== 'exist') {
                    var response_message = res.response.output.data.message;
                    if (response_message !== 'Success') {
                        throw response_message;
                    }
                    var certs = res.response.output.data.response;
                    if (certs.length === 0) {
                        g_form.setMandatory('certificates', true);
                        g_form.addErrorMessage("No Certificates found for Logged-In User / Selected CA Tag name'");
                    } else {
                        for (iterator = 0; iterator < certs.length; iterator++) {
                            var commonName = certs[iterator].commonName;
                            var serialNumber = certs[iterator].serialNumber;
                            var category = certs[iterator].category;
                            g_form.addOption('certificates', commonName + "|" + serialNumber + "|" + category,
                                commonName + "|" + serialNumber + "|" + category);
                        }
                    }
                } else {
                    if (res.response.output.Status == 'Success') {
                        var cert_list = res.response.output.certificate_list;
                        for (var cert = 0; cert < cert_list.length; cert++) {
                            g_form.addOption('certificates', cert_list[cert], cert_list[cert]);
                        }
                        if (cert_list.length === 0) {
                            throw "There is no certificates available for the loggedin user/user-group";
                        }
                    } else if (res.response.output.Status == 'Failed') {
                        throw JSON.stringify(res.response.output.message);

                    }
                }
            }
        } catch (error) {
            g_form.addErrorMessage("Error: " + error);
            var message = 'Error occurred while setting certificates in the form - ' + error;
            var ga = new GlideAjax('avx_logger');
            ga.addParam("sysparm_name", "avxLogger");
            ga.addParam("sysparm_level", "Error");
            ga.addParam("sysparm_script", "revoke_set_certificates");
            ga.addParam("sysparm_application", "AppViewX");
            ga.addParam("sysparm_message", message);
            ga.getXML(function() {});
        }
    }
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-26 17:30:19</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ab25147d1ba5d550cda7db91dd4bcb2a</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>revoke_set_certificates</sys_name>
        <sys_overrides/>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>catalog_script_client_ab25147d1ba5d550cda7db91dd4bcb2a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-03 14:11:41</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <va_supported>true</va_supported>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
