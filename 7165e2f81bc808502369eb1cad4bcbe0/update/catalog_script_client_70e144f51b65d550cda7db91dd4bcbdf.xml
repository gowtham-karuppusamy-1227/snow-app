<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Enroll Certificate">d830d29c1bc91d1061858480cd4bcbe1</cat_item>
        <cat_variable>IO:708cee981b8d1d1061858480cd4bcb01</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>set_bit_length</name>
        <order/>
        <published_ref/>
        <script><![CDATA[/*
Function to populate the below details by dynamically fetching it from the AppviewX policy.
	1. Bit lengths
*/
function onChange(control, oldValue, newValue, isLoading, isTemplate) {
    if (isLoading || newValue === '') {
        return;
    }
    try {
        var CA = g_form.getValue('certificate_authority');
        var key_type = g_form.getValue('key_type');
        var ca_policy = g_form.getValue('ca_policy_details');
        var digicert_mpki_profile = g_form.getValue('digicert_mpki_profiles');
        var amazon_issuer = g_form.getValue('issuer');
		var avx_issuer_location = g_form.getValue('avx_issuer_location');
		var ca_account = g_form.getValue('validate_ca_account');
        var swisssign_client_name = g_form.getValue('swisssign_client_name');
        var swisssign_product = g_form.getValue('swisssign_product');
        var iterator, key;
        g_form.clearOptions('bit_length');
        g_form.addOption('bit_length', '', "Select");
        g_form.setValue('bit_length', '', 'Select');
        try {
            ca_policy = JSON.parse(ca_policy);
        } catch (err) {
            throw "Couldn't parse the ca policy to fetch the associated key type.";
        }
        if (CA == 'DigiCert MPKI' && digicert_mpki_profile != "") {
            var profile_flag = 0;
            for (iterator = 0; iterator < ca_policy.length; iterator++) {
                result = ca_policy[iterator];
                if (!result.certificateAuthority) {
                    throw 'Certificate Autority is not configured in AppviewX policy.';
                }
                if (result.certificateAuthority === CA) {
                    var digicert_casettings = result.caSettings;
                    for (caSetting = 0; caSetting < digicert_casettings.length; caSetting++) {
                        if (!digicert_casettings[caSetting].name) {
                            throw 'CA account details or DigiCert MPKI profiles are not available.';
                        }
                        if (digicert_casettings[caSetting].name === ca_account) {
                            var digicert_profiles = digicert_casettings[caSetting].profiles || {};
                            if (digicert_profiles.name == digicert_mpki_profile) {
                                profile_flag = 1;
                                var bit_lengths = digicert_profiles.certificateKeyParams[key_type];
                                if (!bit_lengths) {
                                    throw 'KeyParameters are not configured in the AppviewX policy.';
                                }
                                for (var bit = 0; bit < bit_lengths.length; bit++) {
                                    g_form.addOption('bit_length', bit_lengths[bit], bit_lengths[bit]);
                                }
                                if (bit_lengths.length > 0) {
                                    g_form.setValue('bit_length', bit_lengths[0], bit_lengths[0]);
                                }
                                break;
                            }
                        }
                        if (profile_flag == 1) {
                            break;
                        }
                    }
                }
            }
        }
        else if (CA === "SwissSign") {
            for (iterator = 0; iterator < ca_policy.length; iterator++) {
                var result = ca_policy[iterator];
                if (!result.certificateAuthority) {
                    throw 'Certificate Authority Details is not configured in AppViewX Policy.';
                }
                if (result.certificateAuthority === CA) {
                    if (!result.caSettings) {
                        throw 'CA Account settings is not configured in AppViewX Policy';
                    }
                    var swisssign_ca_settings = result.caSettings;
                    for (var div = 0; div < swisssign_ca_settings.length; div++) {
                        if (swisssign_ca_settings[div].name === ca_account) {
                            if (!swisssign_ca_settings[div].clients) {
                                throw 'Client details are missing in the policy.';
                            }
                            var swisssign_clients = swisssign_ca_settings[div].clients;
                            for (var client = 0; client < swisssign_clients.length; client++) {
                                if (swisssign_clients[client].name === swisssign_client_name) {
                                    if (!swisssign_clients[client].certTypes) {
                                        throw 'Certificate types are not configured in AppviewX Policy.';
                                    }
                                    var cert_types = swisssign_clients[client].certTypes;
                                    for (var cert_type = 0; cert_type < cert_types.length; cert_type++) {
                                        if (cert_types[cert_type].name === swisssign_product) {
                                            if (!cert_types[cert_type].certificateKeyParams[key_type]) {
                                                throw 'KeyParameters are not configured in AppviewX policy.';
                                            }
                                            var certificateKeyParams = cert_types[cert_type].certificateKeyParams[key_type];
                                            for (key = 0; key < certificateKeyParams.length; key++) {
                                                g_form.addOption('bit_length', certificateKeyParams[key], certificateKeyParams[key]);
                                            }
                                            if (certificateKeyParams.length > 0) {
                                                g_form.setValue('bit_length', certificateKeyParams[0], certificateKeyParams[0]);
                                            }
                                            break;
                                        }
                                    }
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
            }
        }
        else if (CA !== 'Amazon Private CA' && CA !== 'AppViewX PKIaaS') {
            for (iterator = 0; iterator < ca_policy.length; iterator++) {
                var result = ca_policy[iterator];
                if (!result.certificateAuthority) {
                    throw 'Certificate Autority is not configured in AppviewX policy.';
                }
                if (result.certificateAuthority === CA) {
                    if (!result.certificateKeyParams[key_type]) {
                        throw 'KeyParameters are not configured in AppviewX policy.';
                    }
                    var certificateKeyParams = result.certificateKeyParams[key_type];
                    for (key = 0; key < certificateKeyParams.length; key++) {

                        g_form.addOption('bit_length', certificateKeyParams[key], certificateKeyParams[key]);
                    }
                    if (certificateKeyParams.length > 0) {
                        g_form.setValue('bit_length', certificateKeyParams[0], certificateKeyParams[0]);
                    }
                    break;
                }
            }
        } else if (CA === 'AppViewX PKIaaS') {
			for (iterator = 0; iterator < ca_policy.length; iterator++) {
				result = ca_policy[iterator];
				if (!result.certificateAuthority) {
					throw 'Certificate Autority is not configured in AppviewX policy.';
				}
                if (result.certificateAuthority === CA) {
                    if (!result.multipleAccountDetails) {
                        throw 'Multiple Account Details is not configured in AppviewX Policy.';
                    }
					var acc_details = result.multipleAccountDetails;
					for (var m_acc = 0; m_acc < acc_details.length; m_acc++) {
						if(!acc_details[m_acc].caSettings) {
							throw "Ca Settings is not configured in the ca policy under multipleAccountDetails";
						}
						if(!acc_details[m_acc].caSettings.name) {
							throw "Account Name is not configured in the ca policy under multipleAccountDetails";
						}
						var pki_acc_name = acc_details[m_acc].caSettings.name;
						if(!acc_details[m_acc].caSettings.issuerLocation) {
							throw "Issuer Location is not configured in the ca policy under multipleAccountDetails";
						}
						var ca_issuer_location = acc_details[m_acc].caSettings.issuerLocation;
						if (pki_acc_name === ca_account && avx_issuer_location === ca_issuer_location) {
                            if (!acc_details[m_acc].certificateKeyParams[key_type]) {
                                throw 'KeyParameters are not configured in AppviewX policy.';
                            }
							certificateKeyParams = acc_details[m_acc].certificateKeyParams[key_type];
                            for (key = 0; key < certificateKeyParams.length; key++) {
                                g_form.addOption('bit_length', certificateKeyParams[key], certificateKeyParams[key]);
                            }
                            if (certificateKeyParams.length > 0) {
                                g_form.setValue('bit_length', certificateKeyParams[0], certificateKeyParams[0]);
                            }
							break;
						}
					}
				}
			}
		} else {
            for (iterator = 0; iterator < ca_policy.length; iterator++) {
                result = ca_policy[iterator];
                if (!result.certificateAuthority) {
                    throw 'Certificate Autority is not configured in AppviewX policy.';
                }
                if (result.certificateAuthority === CA) {
                    if (!result.multipleAccountDetails) {
                        throw 'Multiple Account Details is not configured in AppviewX Policy.';
                    }
                    var multiple_accounts = result.multipleAccountDetails;
                    for (var acc = 0; acc < multiple_accounts.length; acc++) {
                        if (multiple_accounts[acc].caSettings.issuerName === amazon_issuer) {
                            if (!multiple_accounts[acc].certificateKeyParams[key_type]) {
                                throw 'KeyParameters are not configured in AppviewX policy.';
                            }
                            certificateKeyParams = multiple_accounts[acc].certificateKeyParams[key_type];
                            for (key = 0; key < certificateKeyParams.length; key++) {
                                g_form.addOption('bit_length', certificateKeyParams[key], certificateKeyParams[key]);
                            }
                            if (certificateKeyParams.length > 0) {
                                g_form.setValue('bit_length', certificateKeyParams[0], certificateKeyParams[0]);
                            }
                            break;
                        }
                    }
                }
            }
        }
    } catch (error) {
        g_form.addErrorMessage("Error: " + error);
        var message = 'Error occured while fetching key type from policy details - ' + error;
        var ga = new GlideAjax('avx_logger');
        ga.addParam("sysparm_name", "avxLogger");
        ga.addParam("sysparm_level", "Error");
        ga.addParam("sysparm_script", "set_bit_length");
        ga.addParam("sysparm_application", "AppViewX");
        ga.addParam("sysparm_message", message);
        ga.getXML(function() {});
    }

}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-26 16:06:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>70e144f51b65d550cda7db91dd4bcbdf</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>set_bit_length</sys_name>
        <sys_overrides/>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>catalog_script_client_70e144f51b65d550cda7db91dd4bcbdf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-30 07:19:39</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <va_supported>true</va_supported>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
