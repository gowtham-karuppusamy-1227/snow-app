<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_avx_appviewx_aut.validate_csr_attachment</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Checks if the uploaded/pasted CSR content is valid or not.</description>
        <name>validate_csr_attachment</name>
        <script><![CDATA[var validate_csr_attachment = Class.create();
validate_csr_attachment.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    checkAttachmentSizeAndType: function() {
        try {
            var return_value = {};
            var message;
            var client_id;
            var company = this.getParameter("sysparm_company");
            var csr_upload_option = this.getParameter("csr_upload_option");
            var certificate_category = this.getParameter("certificate_category");
            var certificate_authority = this.getParameter("certificate_authority");
			var common_name = this.getParameter("common_name");
            var script_include_call = new appviewx_oauth_token_generation();
            var token_generation = script_include_call.TestConnection(client_id, company);
            if (token_generation.length == 2 && token_generation[0] == 200) {
                var parse_response = JSON.parse(token_generation[1]);
                var token = parse_response['response'];
            } else {
                throw "Error while generating the token";
            }
            if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
                var gr = new GlideRecordSecure('x_avx_appviewx_aut_connection_settings_table');
                gr.addQuery('company', company);
                gr.query();
                if (!gr.hasNext()) {
                    throw "Could not find AppViewX instance url to fetch the details.";
                }
                while (gr.next()) {
                    var url = gr.getValue('instance_url') || '';
                    var mid_server = gr.getValue('mid_server') || '';
                    var cmdb_sync = gr.getDisplayValue('enable_appviewx_inventory_sync') || "false";
                }
            } else {
                url = gs.getProperty("x_avx_appviewx_aut.URL");
                mid_server = gs.getProperty("x_avx_appviewx_aut.MID Server Name");
                cmdb_sync = gs.getProperty("x_avx_appviewx_aut.CMDB Sync");
            }
            var csr_content = "";

            if (csr_upload_option == "paste") {
                csr_content = this.getParameter("csr_content");
            } else {
                var grA = new GlideRecordSecure("sys_attachment");

                grA.addQuery("sys_id", this.getParameter("sysparm_existing"));
                grA.query();
                if (grA.next()) {
                    if (grA.getValue("size_bytes") > 10000) {
                        return "File size must be less than 10kb";
                    } else if (grA.getValue("content_type") != "text/plain" && grA.getValue("content_type") != "application/pkcs10" && grA.getValue("content_type") != "application/octet-stream") {
                        return "Please attach .csr or plain text file";
                    } else {
                        var gsA = new GlideSysAttachment();
                        csr_content = gsA.getContent(grA).toString();
                    }
                }
            }
            csr_content = csr_content.trim();
            if ((csr_content.startsWith('-----BEGIN CERTIFICATE REQUEST-----') && csr_content.endsWith('-----END CERTIFICATE REQUEST-----')) || (csr_content.startsWith('-----BEGIN NEW CERTIFICATE REQUEST-----') && csr_content.endsWith('-----END NEW CERTIFICATE REQUEST-----'))) {
                var r = new sn_ws.RESTMessageV2();
                var payload = {
                    "payload": {
                        "hook": {
                            "name": "snow_parse_csr"
                        },
                        "input": {
                            "certificate_authority": certificate_authority,
                            "csr_content": csr_content,
                            "certificate_category": certificate_category,
							"common_name": common_name
                        }
                    }
                };
                var retry_count = 0;
                while (retry_count < 5) {
                    if (mid_server != "") {
                        r.setMIDServer(mid_server);
                        r.setEccParameter('skip_sensor', 'true');
                    }
                    r.setHttpMethod("post");
                    r.setRequestHeader("token", token);
                    r.setRequestHeader('User-Agent', 'snow');
                    r.setRequestHeader("Content-Type", "application/json");
                    r.setEndpoint(url + "/avxapi/execute-hook?&gwsource=web");
                    r.setRequestBody(JSON.stringify(payload));
                    r.setHttpTimeout(60000);
                    var response = r.executeAsync();
                    var responseBody, responseMessage;
                    if (response.haveError()) {
                        responseBody = response.getBody();
                        try {
                            var res = JSON.parse(responseBody);
                            message = res.message;
                        } catch (err) {
                            message = responseBody;
                        }
                    } else {
                        responseBody = response.getBody();
                        responseBody = JSON.parse(responseBody);
                        if (responseBody !== null) {
                            if (responseBody.response.output !== null) {
                                var response_status = responseBody.response.output.status;
                                if (response_status === "Success") {
                                    return JSON.stringify({
                                        "csr_parameters": responseBody.response.output.csr_parameters,
										"cn_validity" : responseBody.response.output.cn_validity
                                    });
                                } else {
                                    message = responseBody.response.output.message;
                                    throw message;
                                }
                            }
                        }
                    }
                    if (retry_count == 4) {
                        throw message || "Couldn't parse the given csr.";
                    }
                    retry_count = retry_count + 1;
                }
            } else {
                if (csr_upload_option == "paste") {
                    return "Please paste a valid CSR content";
                } else {
                    return "Please attach a valid CSR file";
                }
            }
        } catch (error) {
            var log = new GlideRecordSecure('x_avx_appviewx_aut_logs');
            gs.addErrorMessage(JSON.stringify(responseBody));
            log.initialize();
            log.level = 'Error';
            log.script = 'validate_csr_attachment';
            log.application = 'AppViewX';
            log.message = 'Error occured while parsing the given CSR in appviewx  -  ' + error;
            log.insert();
            return error;
        }
    },
    type: 'validate_csr_attachment'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-14 06:09:22</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>714e2fefb37d1110cda7cf626f076225</sys_id>
        <sys_mod_count>77</sys_mod_count>
        <sys_name>validate_csr_attachment</sys_name>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>sys_script_include_714e2fefb37d1110cda7cf626f076225</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-31 09:54:27</sys_updated_on>
    </sys_script_include>
</record_update>
