<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_avx_appviewx_aut.renew_get_cert_based_on_appviewx</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>renew_get_cert_based_on_appviewx</name>
        <script><![CDATA[var renew_get_cert_based_on_appviewx = Class.create();
renew_get_cert_based_on_appviewx.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    getCert: function() {
        try {
            var client_id;
            var cert_authority = this.getParameter("sysparm_cert_authority");
            var cert_category = this.getParameter("sysparm_cert_type");
            var clm_action = this.getParameter("sysparm_clm_action");
			var ca_tag_name  = this.getParameter("sysparm_ca_tag");
            var company = this.getParameter("sysparm_company");
            var cert_type = cert_category.split(",");
            var loggedin_user_roles = gs.getUser().getRoles();
            var gr = new GlideRecordSecure('x_avx_appviewx_aut_clm_settings');
            gr.addQuery('ca_tag_name', ca_tag_name);
            if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
                gr.addQuery('company', company);
            }
            gr.query();
			var user_group_option = "";
			var user_name = "";
			while (gr.next()) {
				if (clm_action == "Renew") {
					user_group_option = gr.getValue('fetch_user_group_renew');
				} else {
					user_group_option = gr.getValue('fetch_user_group_revoke');
				}
			}
			if (user_group_option == 'Based on Email') {
				user_name = gs.getUser().getEmail();
			} else {
				user_name = gs.getUserName();
			}
            for (var iterator = 0; iterator < loggedin_user_roles.length; iterator++) {
                if (loggedin_user_roles[iterator] === "x_avx_appviewx_aut.app_admin" || loggedin_user_roles[iterator] === "admin" || loggedin_user_roles[iterator] === "x_avx_appviewx_aut.super_admin") {
                    var loggedin_user = "exist";
                    break;
                }
            }
			if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
				var gr_connection = new GlideRecordSecure('x_avx_appviewx_aut_connection_settings_table');
				gr_connection.addQuery('company', company);
				gr_connection.query();
				if (!gr_connection.hasNext()) {
					throw "Could not find AppViewX instance url to fetch the details.";
				}
				while (gr_connection.next()) {
					var url = gr_connection.getValue('instance_url') || '';
					var mid_server = gr_connection.getValue('mid_server') || '';
					var cmdb_sync = gr_connection.getDisplayValue('enable_appviewx_inventory_sync') || "false";
				}
			} else {
				url = gs.getProperty("x_avx_appviewx_aut.URL");
				mid_server = gs.getProperty("x_avx_appviewx_aut.MID Server Name");
				cmdb_sync = gs.getProperty("x_avx_appviewx_aut.CMDB Sync");
			}
            var r = new sn_ws.RESTMessageV2();
            var return_value = {};
            var message;
            if (cmdb_sync == "true") {
				var encoded_query;
                cert_category = cert_category + ",Others";
                var table_response_list = [];
                if (loggedin_user === "exist") {
                    var response_obj = new GlideRecordSecure('x_avx_appviewx_aut_certificate_table');
                    response_obj.initialize();
					response_obj.orderByDesc('valid_from');
                    if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
                        response_obj.addQuery('company', company);
                    }
                    response_obj.addQuery('certificate_authority', cert_authority);
                    response_obj.addQuery('certificate_category', 'IN', cert_category);
					response_obj.addQuery('certificate_status', 'Managed');
                    if (clm_action == 'Renew') {
                        response_obj.addQuery('renewal_status', 'No');
                    }
                    response_obj.addQuery('expiry_status', 'IN', 'Expiry in 10 Days,Expiry in 30 Days,Expiry in 90 Days,Valid');
                    response_obj.query();
					encoded_query = response_obj.getEncodedQuery();
                    if (!response_obj.hasNext()) {
                        throw 'Could not find the certificates for the given certificate authority ' + cert_authority + 'in the certificate table';
                    }
                    return JSON.stringify({"encoded_query": encoded_query});
                } else {
                    var script_include_call = new appviewx_oauth_token_generation();
                    var token_generation = script_include_call.TestConnection(client_id, company);
                    if (token_generation.length > 1 && token_generation[0] == 200) {
                        var parse_response = JSON.parse(token_generation[1]);
                        var token = parse_response['response'];
                    } else {
                        throw "Error while generating the token";
                    }
                    var payload = {
                        "payload": {
                            "hook": {
                                "name": "snow_fetch_certificate_group_for_the_user"
                            },
                            "input": {
                                "user_name": user_name
                            }
                        }
                    };
                    if (mid_server != "") {
                        r.setMIDServer(mid_server);
                        r.setEccParameter('skip_sensor', 'true');
                    }
                    r.setHttpMethod("post");
                    r.setRequestHeader("token", token);
                    r.setRequestHeader('User-Agent', 'snow');
                    r.setRequestHeader("Content-Type", "application/json");
                    r.setEndpoint(url + "/avxapi/execute-hook?&gwsource=web");
                    r.setRequestBody(JSON.stringify(payload));
                    r.setHttpTimeout(180000);
                    var response = r.executeAsync();
                    var responseBody, responseMessage;
                    if (response.haveError()) {
                        responseBody = response.getBody();
                        try {
                            var res = JSON.parse(responseBody);
                            message = res.message;
                        } catch (err) {
                            message = responseBody;
                        }
                        throw message;
                    } else {
                        responseBody = response.getBody();
                        responseBody = JSON.parse(responseBody);
                        if (responseBody.response.status === 'Success') {
                            var cert_group = responseBody.response.output.data.response;
                            var groups = cert_group.join(",");
                        } else {
                            message = responseBody.response.output.data.message;
                            throw message;
                        }
                        response_obj = new GlideRecordSecure('x_avx_appviewx_aut_certificate_table');
                        response_obj.initialize();
                        if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
                            response_obj.addQuery('company', company);
                        }
						response_obj.orderByDesc('valid_from');
                        response_obj.addQuery('certificate_authority', cert_authority);
                        response_obj.addQuery('certificate_category', 'IN', cert_category);
						response_obj.addQuery('certificate_status', 'Managed');
                        if (clm_action == 'Renew') {
                            response_obj.addQuery('renewal_status', 'No');
                        }
                        response_obj.addQuery('expiry_status', 'IN', 'Expiry in 10 Days,Expiry in 30 Days,Expiry in 90 Days,Valid');
                        response_obj.addQuery('certificate_group', 'IN', groups);
                        response_obj.query();
						encoded_query = response_obj.getEncodedQuery();
                        if (!response_obj.hasNext()) {
                            throw 'Could not find the certificates for the given certificate authority ' + cert_authority + 'in the certificate table';
                        }
                        return JSON.stringify({"encoded_query": encoded_query});
                    }
                }
            } else {
                script_include_call = new appviewx_oauth_token_generation();
                token_generation = script_include_call.TestConnection(client_id, company);
                if (token_generation.length > 1 && token_generation[0] == 200) {
                    parse_response = JSON.parse(token_generation[1]);
                    token = parse_response['response'];
                } else {
                    throw "Error while generating the token";
                }
                if (loggedin_user === "exist") {
                    payload = {
                        "payload": {
                            "hook": {
                                "name": "snow_fetch_certs_for_admin_users"
                            },
                            "input": {
                                "certificate_authority": cert_authority,
                                "cert_category": cert_type,
								"clm_action": clm_action
                            }
                        }
                    };
                } else {
                    payload = {
                        "payload": {
                            "hook": {
                                "name": "ServiceNow - Get Certificates Based On RBAC"
                            },
                            "input": {
                                "user_name": user_name,
                                "certificate_authority": cert_authority,
                                "cert_category": cert_type,
                                "clm_action": clm_action
                            }
                        }
                    };
                }
                if (mid_server != "") {
                    r.setMIDServer(mid_server);
                    r.setEccParameter('skip_sensor', 'true');
                }
                r.setHttpMethod("post");
                r.setRequestHeader("token", token);
                r.setRequestHeader('User-Agent', 'snow');
                r.setRequestHeader("Content-Type", "application/json");
                r.setEndpoint(url + "/avxapi/execute-hook?&gwsource=web");
                r.setRequestBody(JSON.stringify(payload));
                r.setHttpTimeout(180000);
                response = r.executeAsync();
                responseBody, responseMessage;
                if (response.haveError()) {
                    responseBody = response.getBody();
                    try {
                        res = JSON.parse(responseBody);
                        message = res.message;
                    } catch (err) {
                        message = responseBody;
                    }
                    throw message;
                } else {
                    responseBody = response.getBody();
                    responseBody = JSON.parse(responseBody);
                    return JSON.stringify(responseBody);
                }
            }
        } catch (error) {
            var log = new GlideRecordSecure('x_avx_appviewx_aut_logs');
            log.initialize();
            log.level = 'Error';
            log.script = 'renew_get_cert_based_on_appviewx';
            log.application = 'AppViewX';
            log.message = 'Error occurred while fetching certificates from appviewx  -  ' + error;
            log.insert();
            return error;
        }
    },
    type: 'renew_get_cert_based_on_appviewx'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-21 10:56:08</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>628fac8ab34e1910cda7cf626f0762d2</sys_id>
        <sys_mod_count>80</sys_mod_count>
        <sys_name>renew_get_cert_based_on_appviewx</sys_name>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>sys_script_include_628fac8ab34e1910cda7cf626f0762d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-08 09:36:58</sys_updated_on>
    </sys_script_include>
</record_update>
