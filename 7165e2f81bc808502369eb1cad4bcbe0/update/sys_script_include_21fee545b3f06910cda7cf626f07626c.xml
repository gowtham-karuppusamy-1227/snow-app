<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_avx_appviewx_aut.update_certificate_attributes</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>update_certificate_attributes</name>
        <script><![CDATA[var update_certificate_attributes = Class.create();
update_certificate_attributes.prototype = {
    initialize: function() {},
    updateCertificateAttributes: function(company_name) {
        try {
            var return_value = {};
            var message;
			var client_id;
            var script_include_call = new appviewx_oauth_token_generation();
            var token_generation = script_include_call.TestConnection(client_id, company_name);
            if (token_generation.length == 2 && token_generation[0] == 200) {
                var parse_response = JSON.parse(token_generation[1]);
                var token = parse_response['response'];
            } else {
                throw "Error While Generating the token.";
            }
            var r = new sn_ws.RESTMessageV2();
            if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
                var gr = new GlideRecordSecure('x_avx_appviewx_aut_connection_settings_table');
				gr.addQuery('company', company_name);
                gr.query();
				if (!gr.hasNext()) {
					throw "Could not find AppViewX instance url to fetch the details.";
				}
				while (gr.next()) {
					var url = gr.getValue('instance_url') || '';
					var mid_server = gr.getValue('mid_server') || '';
				}
            } else {
				url = gs.getProperty("x_avx_appviewx_aut.URL");
				mid_server = gs.getProperty("x_avx_appviewx_aut.MID Server Name");
			}
            if (mid_server != "") {
                r.setMIDServer(mid_server);
                r.setEccParameter('skip_sensor', 'true');
            }
            r.setHttpMethod("get");
            r.setRequestHeader("token", token);
            r.setRequestHeader('User-Agent', 'snow');
            r.setRequestHeader("Content-Type", "application/json");
            r.setEndpoint(url + "/avxapi/certificate/attribute?&gwsource=web");
            r.setHttpTimeout(60000);
            var response = r.executeAsync();
            var responseBody, responseMessage;
            if (response.haveError()) {
                responseBody = response.getBody();
                try {
                    var res = JSON.parse(responseBody);
                    message = res.message;
                } catch (err) {
                    message = responseBody;
                }
                throw message;
            } else {
                responseBody = response.getBody();
                responseBody = JSON.parse(responseBody);
                var attribute_obj = new GlideRecordSecure('x_avx_appviewx_aut_certificate_attribute');
                attribute_obj.initialize();
                attribute_obj.addQuery('name', 'certificate_attributes');
				if (gs.getProperty("glide.sys.domain.partitioning") == 'true') {
					attribute_obj.addQuery('company', company_name);
				}
                attribute_obj.query();
                if (attribute_obj.hasNext()) {
                    while (attribute_obj.next()) {
                        attribute_obj.name = 'certificate_attributes';
                        attribute_obj.certificate_attribute_response = JSON.stringify(responseBody);
						attribute_obj.company = company_name;
                        attribute_obj.update();
                    }
                } else {
                    attribute_obj.name = 'certificate_attributes';
                    attribute_obj.certificate_attribute_response = JSON.stringify(responseBody);
					attribute_obj.company = company_name;
                    attribute_obj.insert();
                }
            }
            var log = new GlideRecordSecure('x_avx_appviewx_aut_logs');
            log.initialize();
            log.level = 'info';
            log.script = 'update_certificate_attributes';
            log.application = 'AppViewX';
            log.message = 'Certificate attributes update were successfully completed.';
			log.company = company_name;
            log.insert();
        } catch (error) {
            gs.info("AppViewX REST API test failed while fetching the certificate attributes for the table : " + error);
            log = new GlideRecordSecure('x_avx_appviewx_aut_logs');
            log.initialize();
            log.level = 'Error';
            log.script = 'update_certificate_attributes';
            log.application = 'AppViewX';
            log.message = 'Error occured while getting certificate attributes for the table -  ' + error;
			log.company = company_name;
            log.insert();
        }
    },

    type: 'update_certificate_attributes'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-02 05:59:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>21fee545b3f06910cda7cf626f07626c</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>update_certificate_attributes</sys_name>
        <sys_package display_value="AppViewX" source="x_avx_appviewx_aut">7165e2f81bc808502369eb1cad4bcbe0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AppViewX">7165e2f81bc808502369eb1cad4bcbe0</sys_scope>
        <sys_update_name>sys_script_include_21fee545b3f06910cda7cf626f07626c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-03 15:17:03</sys_updated_on>
    </sys_script_include>
</record_update>
